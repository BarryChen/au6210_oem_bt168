C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USER_INTERFACE
OBJECT MODULE PLACED IN .\output\obj\user_interface.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE lib_if\user_interface.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR
                    -(.\config;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;
                    -.\bluetooth;.\i2c) DEBUG PRINT(.\output\lst\user_interface.lst) OBJECT(.\output\obj\user_interface.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "display.h"
   3          #include "radio_app_interface.h"
   4          #include "user_interface.h"
   5          #include "playctrl.h"
   6          #include "breakpoint.h"
   7          #include "debug.h"
   8          #include "power.h"
   9          #include "device.h"
  10          #include "spi_play.h"
  11          #include "touchkey_ctrl.h"
  12          #include "pt231x.h"
  13          #include "bt.h"
  14          #include "npca110x.h"
  15          
  16          
  17          
  18          BOOL IsDacMute = FALSE;
  19          BOOL KeyInLedFlashOn = 0;
  20          WORD KeyInLedFlashHoldTmr = 0;
  21          WORD KeyInLedFlashIntTmr = 0;
  22          #ifdef FUNC_BEEP_SOUND_EN       
              BOOL gPushKeyNeedBeepFlag = FALSE;      // ÐèÒª²úÉú°´¼üàÖàÖÉù±êÖ¾
              BOOL gPushKeyBeepStartFlag = FALSE;     //°´¼üàÖàÖÉùÆô¶¯±êÖ¾
              TIMER gPushKeyBeepTimer;        //°´¼üàÖàÖÉùÃù½ÐÒ»´ÎµÄÊ±¼ä³¤¶È¶¨Ê±
              #ifdef FUNC_RADIO_EN
              extern BYTE CODE gFmInGain[];
              #endif
              #ifdef FUNC_LINEIN_EN
              extern BYTE CODE gLineInGain[];
              #endif
              #endif
  33          extern VOID BluetothCtrlEnd(VOID);
  34          
  35          extern BOOL GetBtMuteFlag();
  36          
  37          #ifdef FUNC_SAVE_PLAYTIME_EN
              BOOL gSavePlayTimeEnFlag = FALSE;
              #endif
  40          
  41          #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
              extern BOOL gDevicePlayForcePauseFlag;
              #endif
  44          
  45          extern VOID PlayVol2Decd(VOID);
  46          extern VOID SetLineInVolume(BYTE Vol);
  47          extern VOID DeviceAudioSetVolume(VOID);
  48          extern VOID SetBluetoothVolume(BYTE Vol);
  49          
  50          extern BYTE gRunningDev;
  51          extern BOOL ROM_QuickResponse(BYTE Dev);
  52          BOOL IsSupportSpecialDevice = FALSE;    //Ö§³Ö²¿·ÖÌØÉ«Éè±¸£¬MBR 512×Ö½Ú×îºóÁ½¸ö×Ö½Ú²»ÊÇ0x55AA¡¾Ä¬ÈÏÎªFLASE£¬²
             -»Ö§³ÖÌØÊâÉè±¸¡¿
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 2   

  53          
  54          BOOL getDacMute()
  55          {
  56   1              return IsDacMute;
  57   1      }
  58          // Ñ¡ÔñDAC ºÍÍâ²¿¹¦·ÅMute×´Ì¬
  59          // Param: 
  60          //              DacMuteEn: 1--Ñ¡ÔñDac Mute,  0--Ñ¡ÔñÉèÖÃÒôÁ¿Îª0
  61          //              ExMuteEn: Íâ²¿¹¦·ÅMute Ê¹ÄÜÑ¡Ôñ
  62          VOID MuteOn(BOOL DacMuteEn, BOOL ExMuteEn)
  63          {
  64   1      #ifdef FUNC_EXMUTE_EN
                      if(ExMuteEn == TRUE)
                      {
                              ExMuteOn();     
                      }
              #endif
  70   1      #if defined(FUNC_PT231X_EN) && !defined(AU6210K_NR_D_8_CSRBT)
                    PT2313MuteOnOff(1);
              #endif
  73   1              if(DacMuteEn == TRUE)
  74   1              {       
  75   2      #ifdef AU6210K_NR_D_8_CSRBT
                              NPCA110X_SetOutMute(TRUE);
              #else
  78   2      #endif
  79   2                      InDacMuteEn();  
  80   2      
  81   2                      //¿ÉÒÔÓÃÒÔÏÂ´úÂë½â¾öLineIn Mute×´Ì¬ÏÂÂ©ÒôÎÊÌâ£¬µ«ÊÇ»á´øÀ´ÇáÎ¢µÄPOP.
  82   2      #ifdef FUNC_LINEIN_EN
                              if(gSys.SystemMode == SYS_MODE_LINEIN)
                              {
                                      DBG(("InDacChannelSel(DAC_CH_NONE),Mute\n"));
                                      InDacChannelSel(DAC_CH_NONE);
                              }
              #endif
  89   2      
  90   2      
  91   2      #if defined(FUNC_BLUETOOTH_CSR_EN)||defined(AU6210K_NR_D_8_CSRBT)
  92   2                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH)
  93   2                      {
  94   3                              DBG(("btInDacChannelSel(DAC_CH_NONE),Mute\n"));
  95   3                              InDacChannelSel(DAC_CH_NONE);
  96   3                      }
  97   2      #endif
  98   2      
  99   2      
 100   2      #if defined(AU6210K_JLH_JH82B)
              #else
 102   2      #ifdef FUNC_BLUETOOTH_EN
                              if (gSys.SystemMode == SYS_MODE_BLUETOOTH)
                              {
                                      InDacChannelSel(DAC_CH_NONE);
              
                              }
              #endif
 109   2      #endif
 110   2      
 111   2              }
 112   1              else
 113   1              {
 114   2      #ifdef AU6210K_NR_D_8_CSRBT
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 3   

                              NPCA110X_DAC1_Set_Volume_and_Mute(0);
                              NPCA110X_SetOutMute(TRUE);
              #else
 118   2                      InDacSetVolume(0, 0);
 119   2      #endif
 120   2              }       
 121   1      
 122   1      #ifdef  FUNC_RADIO_EN
 123   1              if(gSys.SystemMode == SYS_MODE_RADIO)
 124   1              {
 125   2                      RadioMute(TRUE);
 126   2              }
 127   1      #endif  
 128   1      
 129   1              IsDacMute = TRUE;
 130   1      }
*** WARNING C280 IN LINE 62 OF LIB_IF\USER_INTERFACE.C: 'ExMuteEn': unreferenced local variable
 131          
 132          
 133          // ½â³ýMute×´Ì¬
 134          VOID UnMute(VOID)
 135          {
 136   1      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                      if(gDevicePlayForcePauseFlag == TRUE)
                      {
                              return;
                      }
              #endif
 142   1      
 143   1              DBG1(("unmute.....  \n"));
 144   1              if(gSys.Volume == 0)
 145   1              {
 146   2                      return;
 147   2              }       
 148   1      
 149   1              if(IsDacMute == TRUE)
 150   1              {               
 151   2      #ifdef  FUNC_RADIO_EN
 152   2                      if(gSys.SystemMode == SYS_MODE_RADIO)
 153   2                      {
 154   3                              RadioMute(FALSE);
 155   3                              RadioSetVolume(gSys.Volume);
 156   3                      }
 157   2      #endif  
 158   2      
 159   2                      //Èç¹ûMuteOnº¯Êýµ÷ÓÃInDacChannelSelº¯Êý£¬ÐèÒªÔÚUnMuteº¯ÊýÖÐÖØÐÂÁ¬Í¨LINEINÍ¨µÀ.
 160   2      #ifdef FUNC_LINEIN_EN
                              if(gSys.SystemMode == SYS_MODE_LINEIN)
                              {
                                      DBG(("InDacChannelSel(DAC_CH_LINEIN),UnMute,gSys.Volume:%bd\n", gSys.Volume));
              
              #ifdef AU6210K_NR_D_8_CSRBT
                                      NPCA110X_ADC_Input_CH_Select(INPUT_CH0);
                                      NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
              #else
                                      InDacChannelSel(LINEIN_IO_TYPE);
                                      SetLineInVolume(gSys.Volume);
              #endif                  
                              }
              #endif  
 174   2      
 175   2      #ifdef FUNC_BLUETOOTH_CSR_EN
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 4   

 176   2                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH)
 177   2                      {
 178   3      #ifdef AU6210K_NR_D_8_CSRBT
                                      NPCA110X_ADC_Input_CH_Select(INPUT_CH1);
                                      NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
              #else
 182   3                      
 183   3                              DBG(("InDacChannelSel(DAC_CH_LINEIN),UnMute,gSys.Volume:%bd\n", gSys.Volume));
 184   3                              InDacChannelSel(BLUETOOTH_CH_TYPE);
 185   3                              SetBluetoothVolume(gSys.Volume);
 186   3                      
 187   3      #endif                  
 188   3                      }
 189   2      #endif  
 190   2      
 191   2      #if defined(AU6210K_JLH_JH82B)
                              SetBluetoothVolume(gSys.Volume);
              #else
 194   2      #ifdef FUNC_BLUETOOTH_EN
                              if (gSys.SystemMode == SYS_MODE_BLUETOOTH)
                              {
                                      DBG(("bluetooth unmte\n"));
                                      SET_E0_ANALOG_IN();     //½«E0E1ÅäÖÃÎªÄ£Äâ¶Ë¿Ú
                                      SET_E1_ANALOG_IN();     
                                      InDacChannelSel(DAC_CH_E0E1); //À¶ÑÀÓÃE0E1Í¨µÀ
                                      //SetBluetoothVolume(gSys.Volume);
                              }
              #endif
 204   2      #endif
 205   2      
 206   2              }
 207   1      #ifdef AU6210K_NR_D_8_CSRBT
                      NPCA110X_SetOutMute(FALSE);
              #endif
 210   1              InDacMuteDis();
 211   1      
 212   1      #ifdef FUNC_EXMUTE_EN
                      if(gSys.Volume > 0)
                      {
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                              if(IsHeadphoneLinkFlag == FALSE)
              #endif
                              {
                                      ExMuteOff();
                              }       
                      }               
              #endif
 223   1      #if 0// defiend(FUNC_PT231X_EN) && !defiend(AU6210K_NR_D_8_CSRBT)
                    PT2313MuteOnOff(0);
              #endif
 226   1      
 227   1              IsDacMute = FALSE;
 228   1      }
 229          
 230          
 231          // ¸Ä±äMute×´Ì¬
 232          VOID MuteStatusChange(VOID)
 233          {       
 234   1              DBG((">>MuteStatusChange()\n"));
 235   1              if(gSys.MuteFg)
 236   1              {
 237   2                      gSys.MuteFg = FALSE;            
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 5   

 238   2                      UnMute();       
 239   2                      DBG1(("4433\n"));
 240   2              }
 241   1              else
 242   1              {       
 243   2                      gSys.MuteFg = TRUE;
 244   2                      MuteOn(TRUE, TRUE);       
 245   2              }
 246   1      #ifdef FUNC_DISP_EN
 247   1              DispMute();
 248   1      #endif  
 249   1              DBG(("<<MuteStatusChange()\n"));
 250   1      }
 251          
 252          
 253          // ÉèÖÃÏµÍ³ÒôÁ¿
 254          VOID SetVolume(VOID)
 255          {
 256   1              DBG((">>SetVolume() %d\n",(WORD)gSys.Volume));
 257   1              
 258   1              switch(gSys.SystemMode)
 259   1              {
 260   2      #if (defined(FUNC_USB_EN) || defined(FUNC_CARD_EN))
 261   2      #ifdef FUNC_USB_EN
                              case SYS_MODE_USB:
              #endif
 264   2      #ifdef FUNC_CARD_EN
 265   2                      case SYS_MODE_SD:
 266   2      #endif
 267   2      #ifdef  FUNC_OTP_PLAY_EN
                              case SYS_MODE_OTPDEV:
              #endif
 270   2                              PlayVol2Decd();
 271   2                              break;
 272   2      #endif
 273   2      
 274   2      #ifdef FUNC_LINEIN_EN
                              case SYS_MODE_LINEIN:
                                      SetLineInVolume(gSys.Volume);
                                      break;
              #endif
 279   2      
 280   2      #ifdef FUNC_BLUETOOTH_CSR_EN
 281   2                      case SYS_MODE_BLUETOOTH:
 282   2                              SetBluetoothVolume(gSys.Volume);
 283   2                              break;
 284   2      #endif
 285   2      
 286   2      #if 0//def FUNC_BLUETOOTH_EN
                              case SYS_MODE_BLUETOOTH:
                                      SetBluetoothVolume(gSys.Volume);
                                      break;
              #endif
 291   2      
 292   2      
 293   2      #ifdef FUNC_RADIO_EN
 294   2                      case SYS_MODE_RADIO:
 295   2                              RadioSetVolume(gSys.Volume);
 296   2                              break;
 297   2      #endif
 298   2      
 299   2      #ifdef FUNC_AUDIO_EN
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 6   

                              case SYS_MODE_AUDIO:
                                      DeviceAudioSetVolume();
                                      break;
              #endif
 304   2      
 305   2      #ifdef FUNC_AUDIO_READER_EN
                              case SYS_MODE_AUDIO_READER:
                                      DeviceAudioSetVolume();
                                      break;
              #endif
 310   2      
 311   2                      default:
 312   2                              return;//break;
 313   2              }
 314   1      
 315   1      #ifdef FUNC_BREAK_POINT_EN
 316   1              BP_SaveInfo(&gBreakPointInfo.PowerMemory.Volume,sizeof(gBreakPointInfo.PowerMemory.Volume));
 317   1      #endif
 318   1      
 319   1      }
 320          
 321          
 322          // ÉèÖÃÏµÍ³ÒôÁ¿²¢Í¬Ê±½â³ýMute×´Ì¬
 323          VOID SetVolumeWithMute(VOID)
 324          {
 325   1      #ifdef AU6210K_NR_D_8_CSRBT
                      DBG((">>NPCA110X_DAC1_Set_Volume_and_Mute() %d\n",(WORD)gSys.Volume));
              #if (defined(FUNC_USB_EN) || defined(FUNC_CARD_EN))
                      if(gSys.SystemMode == SYS_MODE_SD)
                              SetVolume();
                      else
              #endif
                      {
                              NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
              #ifdef FUNC_BREAK_POINT_EN
                              BP_SaveInfo(&gBreakPointInfo.PowerMemory.Volume,sizeof(gBreakPointInfo.PowerMemory.Volume));
              #endif
                              
                      }
                      DBG(("gSys.Volume = %x\n",gSys.Volume));        
              DBG(("gBreakPointInfo.PowerMemory.Volume = %x\n",gBreakPointInfo.PowerMemory.Volume));  
              
              
              #else
 344   1              SetVolume();
 345   1      #endif
 346   1      
 347   1              if((gSys.Volume == 0) && (IsDacMute == FALSE))
 348   1              {
 349   2                      gSys.MuteFg = FALSE;            
 350   2                      MuteOn(FALSE, TRUE);            
 351   2              }
 352   1              if((IsDacMute == TRUE) && (gSys.Volume > 0))
 353   1              {
 354   2                      gSys.MuteFg = TRUE;
 355   2              }
 356   1              if(gSys.MuteFg == TRUE)
 357   1              {
 358   2                      gSys.MuteFg = FALSE;
 359   2                      DBG1(("rrrrrr\n"));
 360   2                      UnMute();       
 361   2              }
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 7   

 362   1      
 363   1      #ifdef FUNC_DISP_EN
 364   1      #ifndef FUNC_SINGLE_LED_EN
                      DispMute();       //ÕýÈ·»Ö¸´MuteÏÔÊ¾×´Ì¬¡£±ÜÃâ´ÓMute×´Ì¬ÏÂÉèÖÃÒôÁ¿Ôì³ÉµÄÏÔÊ¾´íÎó¡£
              #endif  
 367   1      #endif
 368   1      }
 369          
 370          
 371          // ÉèÖÃÏµÍ³ÒôÁ¿²¢Í¬Ê±½â³ýMute×´Ì¬¡¢ÏÔÊ¾ÒôÁ¿
 372          VOID SetVolumeWithDisplay(VOID)
 373          {
 374   1              SetVolumeWithMute();
 375   1      #ifdef FUNC_DISP_EN
 376   1              DispVolume(TRUE);
 377   1      #endif
 378   1      }
 379          
 380          
 381          //µ÷½ÚÏµÍ³ÒôÁ¿
 382          VOID VolumeAdjust(BYTE Direction)
 383          {       
 384   1      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                      if(gDevicePlayForcePauseFlag == TRUE) 
                      {
                              return;
                      }                                       
              #endif
 390   1              
 391   1              if(Direction == UP)
 392   1              {
 393   2                      DBG(("Vol+\n"));                        
 394   2                      if(gSys.Volume < VOLUME_MAX)
 395   2                      {
 396   3                              gSys.Volume++;  
 397   3                      }       
 398   2              }
 399   1              else
 400   1              {
 401   2                      DBG(("Vol-\n"));                        
 402   2                      if(gSys.Volume > VOLUME_MIN)
 403   2                      {
 404   3                              gSys.Volume--;
 405   3                      }       
 406   2              }
 407   1      #ifdef AU6210K_ZB_BT007_CSR
 408   1                      {
 409   2                              if(gSys.Volume == VOLUME_MAX)   
 410   2                              {
 411   3                                      SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);                  
 412   3                                      
 413   3                                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH && !GetBtMuteFlag())
 414   3                                      {
 415   4                                              DBG1(("123\m"));
 416   4                                              UnMute();
 417   4                                      }
 418   3                              }
 419   2              
 420   2                              if(gSys.Volume == VOLUME_MIN)   
 421   2                              {
 422   3                                      SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);                  
 423   3                                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH && !GetBtMuteFlag())
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 8   

 424   3                                      {
 425   4                                              DBG1(("345\m"));
 426   4                                              UnMute();
 427   4                                      }
 428   3                              }
 429   2                      }
 430   1      #endif  
 431   1              SetVolumeWithDisplay(); 
 432   1                              
 433   1      #ifdef FUNC_BEEP_SOUND_EN       
                      if(gSys.Volume < VOLUME_MAX)    
                      {
                              PushKeyBeep(1);
                      }
                      else
                      {
                              PushKeyBeep(2);
                      }
              #endif  
 443   1      }
 444          
 445          
 446          #ifndef FUNC_RADIO_EN
              //ÓÉÓÚDACÇý¶¯´úÂëÖÐ»áµ÷ÓÃ£¬ÐèÒªÔÚFUNC_RADIO_ENºê¹Ø±ÕÊ±ÉùÃ÷ÒÔÏÂº¯Êý
              VOID RadioCtrlInit(VOID)
              {
                      //DBG(("RadioCtrlInit,00\n"));
              }
              
              
              VOID RadioCtrlDeinit(VOID)
              {
                      //DBG(("RadioCtrlDeinit,00\n"));
              }
              
              
              BOOL RadioMute(BOOL MuteFlag)
              {
                      //DBG(("RadioMute,00\n"));
                      return TRUE;
              }
              #endif
 466          
 467          
 468          #ifdef FUNC_BEEP_SOUND_EN
              //  ²úÉú°´¼üàÖàÖÉù
              // Param:
              //              ContinueNum: Á¬Ðø²úÉú°´¼üàÖàÖÉù´ÎÊý
              VOID PushKeyBeep(BYTE ContinueNum)
              {               
                      if(gPushKeyNeedBeepFlag == TRUE)                
                      {
              #ifdef  FUNC_RADIO_EN
                              if(gSys.SystemMode == SYS_MODE_RADIO)  
                              {
                                      SysClkDivClr();
                              }
              #endif
                              
              #ifdef FUNC_EXMUTE_EN
                              if((gSys.Volume > 0) && (IsDacMute == TRUE))
                              {               
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 9   

              #ifdef  FUNC_HEADPHONE_DETECT_EN
                                      if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      {
                                              ExMuteOff();
                                      }
                              }               
              #endif
                              
                              while(ContinueNum)
                              {               
                                      ContinueNum--;
                                      //ÉèÖÃGPE0(FM_L)×÷ÎªÐÅºÅÊäÈëÍ¨µÀ
                                      baGPIOCtrl[GPIO_E_OE] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_IE] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_PU] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_PD] |= 0x01;          
                                      DBG(("InDacExFmConnect(DAC_CH_E0_L)\n"));
                                      InDacExFmConnect(DAC_CH_E0_L);  
              #ifdef  FUNC_LINEIN_EN
                                      if(gSys.SystemMode == SYS_MODE_LINEIN) 
                                      {
                                              InDacLineInGain(gLineInGain[gSys.Volume], gLineInGain[gSys.Volume]);                                    
                                      }
                                      else
              #endif
                                      {
              #ifdef  FUNC_RADIO_EN
                                              InDacLineInGain(gFmInGain[gSys.Volume], gFmInGain[gSys.Volume]);
              #else
                                              InDacLineInGain(gLineInGain[gSys.Volume], gLineInGain[gSys.Volume]);    
              #endif
                                      }
                                      WaitUs(10);
                                      baGPIOCtrl[GPIO_E_OE] |= 0x01;  //ÉèÖÃE0ÎªÊä³ö
                                      gPushKeyBeepStartFlag = TRUE;
                                      
                                      TimeOutSet(&gPushKeyBeepTimer, 20);
                                      while(!IsTimeOut(&gPushKeyBeepTimer))
                                      {                       
                                              if((gSys.SystemMode == SYS_MODE_USB) || (gSys.SystemMode == SYS_MODE_SD)) 
                                              {
                                                      SongPlayDo();
                                              }       
                                      }
                                      gPushKeyBeepStartFlag = FALSE;          
                                      
                                      DBG(("InDacExFmDisConnect()\n"));
                                      InDacExFmDisConnect();          
                                      baGPIOCtrl[GPIO_E_OE] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_IE] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_PU] &= ~0x01;
                                      baGPIOCtrl[GPIO_E_PD] &= ~0x01;                         
              
                                      if(ContinueNum)
                                      {
                                              TimeOutSet(&gPushKeyBeepTimer, 100);
                                              while(!IsTimeOut(&gPushKeyBeepTimer))
                                              {                       
                                                      if((gSys.SystemMode == SYS_MODE_USB) || (gSys.SystemMode == SYS_MODE_SD)) 
                                                      {
                                                              SongPlayDo();
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 10  

                                                      }       
                                              }               
                                      }
                              }
                              
              #ifdef FUNC_EXMUTE_EN
                              if((gSys.Volume > 0) && (IsDacMute == TRUE))
                              {               
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                                      if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      {
                                              ExMuteOn();
                                      }
                              }               
              #endif
                              
              #ifdef  FUNC_RADIO_EN
                              if(gSys.SystemMode == SYS_MODE_RADIO)  
                              {
                                      SysClkDivSet(CLK_DIV_RATE);
                              }
              #endif
                              gPushKeyNeedBeepFlag = FALSE;
                      }
              }
              #endif
 575          
 576          
 577          //----------------------------------------------------------
 578          // Èç¹ûÓÃ»§ÐèÒª¡¾ÂË¿ÕÎÄ¼þ¼Ð¡¿¹¦ÄÜ£¬ÒªÔÚÓ¦ÓÃ´úÂëÉÏÖØÐ´FsInfoInit()º¯Êý
 579          #ifdef FUNC_FOLDER_EN
              #define MAX_FOLDER_NUM_SAVE     1024                    //save foler 1-2048 empty flag
              BYTE gFolderEmpty[MAX_FOLDER_NUM_SAVE / 8];
              extern WORD gMaxFoldBitMapNum;
              extern BYTE XDATA* gpFoldEmpty;
              
              
              // ÂË¿ÕÎÄ¼þ¼Ð³õÊ¼»¯
              VOID FsInfoInit(VOID)
              {
              
                      gpFoldEmpty = &gFolderEmpty;
                      gMaxFoldBitMapNum = MAX_FOLDER_NUM_SAVE;
                      memset(gpFoldEmpty, 0xFF, sizeof(gFolderEmpty));
                      DBG(("FsInfoInit,gpFoldEmpty:0x%lx, gMaxFoldBitMapNum:%u\n", (DWORD)gpFoldEmpty, gMaxFoldBitMapNum));   
              }
              #endif
 596          
 597          
 598          //----------------------------------------------------------
 599          // Èç¹ûÓÃ»§ÐèÒªÊµÏÖ¡¾°´¼ü¿ìËÙÏìÓ¦¡¿¹¦ÄÜ£¬ÒªÔÚÓ¦ÓÃ´úÂëÉÏÖØÐ´QuickResponse()º¯Êý
 600          #ifdef FUNC_QUICK_RESPONSE_EN
              extern BOOL IsSwitchMode;
              // Èç¹ûÐèÒª¿ìËÙÍË³ö·µ»ØTRUE.
              BOOL QuickResponse(VOID)
              {
                      // To do...     
                      if(MessageGet(MSG_FIFO_DEV_CTRL) == MSG_MODE_SW)
                      {
                              IsSwitchMode = TRUE;  
                              MessageInit();
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 11  

                              return TRUE;
                      }
              
                      return FALSE;
              }
              #endif
 616          
 617          
 618          extern BOOL BTisMute();
 619          //----------------------------------------------------------
 620          // Èç¹ûÓÃ»§ÐèÒªÔÚ1msÏµÍ³Ê±»ùÉÏ×ö´¦Àí£¬ÒªÔÚÓ¦ÓÃ´úÂëÉÏÖØÐ´TimerTick1ms()º¯Êý
 621          extern BOOL gIsNvmOnUse;
 622          VOID TimerTick1ms(VOID)
 623          {
 624   1      #if     (PWR_KEY_MODE == PWR_KEY_SLIDE_SWITCH)
                      extern BOOL gIsPwrkeyPadOn;
              
                      if((gIsPwrkeyPadOn == FALSE) && (gIsNvmOnUse == FALSE))
                      {
                              //²»ÄÜÖ´ÐÐInDacChannelSel¡¢InDacPowerDownÖ®Àà²Ù×÷¡£
              #ifdef FUNC_DISP_EN
                              DispDeInit();
              #endif  
              #ifdef FUNC_EXMUTE_EN           
                              ExMuteOn(); 
              #endif
                              if(gSys.SystemMode == SYS_MODE_BLUETOOTH)
                                      BluetothCtrlEnd();
                              
                              DBG1(("22222GoToPDMode\n"));
                              //InDacMuteEn();        //¹Ø±ÕÊÇÎªÁË ½â¾ö¹Ø»úÊ±¼äÌ«³¤ÎÊÌâ
                              GoToPDMode();           //Ö´ÐÐÓ²¿ª¹ØµÄÏµÍ³¹Ø±Õ¶¯×÷
                      }
              #endif
 644   1      
 645   1      #ifdef FUNC_SEG_LED_EN 
              #if !defined(FUNC_TIMER1_REFRESH_LED_EN)
                      LedFlushDisp();
              #endif
              #endif
 650   1      
 651   1      #ifdef FUNC_SEG_LCD_EN 
                      LcdFlushDisp();
              #endif
 654   1      #if 0
                      if(KeyInLedFlashHoldTmr)
                      {
                              KeyInLedFlashHoldTmr--;
                              if(KeyInLedFlashIntTmr)
                              {
                                      KeyInLedFlashIntTmr--;                          
                              }
                              else
                              {
                                      KeyInLedFlashIntTmr =100;
                                      if(KeyInLedFlashOn)
                                      {
                                              KeyInLedFlashOn =0;
                                              baGPIOCtrl[GPIO_B_OE]|=0x80;
                                              baGPIOCtrl[GPIO_B_OUT]|=0x80;
                                      }
                                      else
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 12  

                                      {
                                              KeyInLedFlashOn =1;
                                              baGPIOCtrl[GPIO_B_OE]|=0x80;
                                              baGPIOCtrl[GPIO_B_OUT]&=(~0x80);
                                      }
                              }
                      }
              #endif
 680   1      #if 0
              
                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH)
                      {
                              if(btIO_Red_Led_is_High())
                              {
                                      setMCU_Red__Led_Port();
                              }
                              else
                              {
                                      clrMCU_Red__Led_Port();
                              }
              
                              if(btIO_Blue_Led_is_High())
                                      setMCU_Blue__Led_Port();
                              else
                                      clrMCU_Blue__Led_Port();
              
              #ifdef FUNC_EXMUTE_EN
                              if(BTisMute())          
                                      //mute          
                                      ExMuteOn();      
                              else
                                      //unmute
                                      ExMuteOff();
              #endif
              
                              
                      }
              #endif
 710   1      
 711   1              // To do...
 712   1      }
 713          
 714          
 715          // Èç¹û¿Í»§ÐèÒªºöÂÔÌØ¶¨VID/PIDµÄUSBÉè±¸£¬¿ÉÒÔÍ¨¹ý±¾º¯ÊýÊµÏÖ
 716          BOOL USB_IgnoreDev(VOID)
 717          {
 718   1              if(gLibUsbInfo.VID == 0x05AC)   //ºöÂÔÆ»¹û¹«Ë¾ËùÓÐÉè±¸
 719   1              {
 720   2                      DBG(("Apple device!\n"));
 721   2                      return TRUE;
 722   2              }
 723   1      
 724   1              return FALSE;
 725   1      }
 726          
 727          
 728          //----------------------------------------------------------
 729          // Èç¹û²»Ö§³ÖUSB AudioÄ£Ê½£¬ÏµÍ³²»¼ì²âPCÁ¬½Ó×´Ì¬£¬ÒÔÔöÇ¿UÅÌ¼æÈÝÐÔ¡£
 730          BOOL IsAudDetectDisable(VOID)
 731          {
 732   1      #if (defined(FUNC_AUDIO_EN) || defined(FUNC_READER_EN) || defined(FUNC_AUDIO_READER_EN))
                      return FALSE;
C51 COMPILER V9.00   USER_INTERFACE                                                        12/20/2015 23:03:52 PAGE 13  

              #else
 735   1              return TRUE;
 736   1      #endif
 737   1      }
 738          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    492    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
