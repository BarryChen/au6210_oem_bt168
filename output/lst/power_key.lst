C51 COMPILER V9.00   POWER_KEY                                                             12/22/2015 18:11:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE POWER_KEY
OBJECT MODULE PLACED IN .\output\obj\power_key.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE key\power_key.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\confi
                    -g;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\blueto
                    -oth;.\i2c) DEBUG PRINT(.\output\lst\power_key.lst) OBJECT(.\output\obj\power_key.obj)

line level    source

   1          #include <reg51.h>      
   2          
   3          #include "type.h"       
   4          #include "syscfg.h"
   5          #include "utility.h"
   6          #include "debug.h"
   7          #include "timer.h"
   8          #include "sysctrl.h"
   9          #include "key.h"
  10          #include "power_key.h"
  11          
  12          
  13          #if     (PWR_KEY_MODE == PWR_KEY_PUSH_BUTTON)
  14          
  15                  #warning        "MV: PUSH BUTTON POWER KEY ENABLE!"
*** WARNING C320 IN LINE 15 OF key\power_key.c: "MV: PUSH BUTTON POWER KEY ENABLE!"
  16          
  17          extern BOOL     gIsPwrkeyPadOn;                         //POWER_KEY引脚的状态判定是在定时中断内执行的，通过该全局变量与本文件的软开
             -关处理流程交互
  18                                                                                          //系统启动时POWER_KEY默认是接通状态
  19          #define         POWER_KEY_CP_TIME                       100                     //要求轻触开关机时，CP时间需要短
  20          #define         POWER_KEY_CPH_TIME                      100
  21          
  22          
  23          typedef enum _POWER_KEY_STATE
  24          {
  25                  POWER_KEY_STATE_IDLE,
  26                  POWER_KEY_STATE_PRESS_DOWN,
  27                  POWER_KEY_STATE_CP
  28          
  29          } POWER_KEY_STATE;
  30          
  31          
  32          TIMER                   PowerKeyWaitTimer;
  33          POWER_KEY_STATE PowerKeyState;
  34          BOOL                    IsPwrkeyInSysOn = TRUE;         //表示当前是否是系统启动阶段的POWER_KEY识别
  35          
  36          #ifdef AU6210K_XLX_ALD800
              static CODE BYTE PowerKeyEvent[3] = {MSG_MODE_SW, MSG_SYS_ON, MSG_SYS_OFF};     
              #else
  39          static CODE BYTE PowerKeyEvent[3] = {MSG_NONE, MSG_SYS_ON, MSG_SYS_OFF};        
  40          #endif
  41          
  42          
  43          
  44          // Initialize POWER_KEY scan operation.
  45          VOID PowerKeyScanInit(VOID)
  46          {
  47   1              DBG(("PowerKeyScanInit*******\n"));
  48   1              PowerKeyState = POWER_KEY_STATE_IDLE;
  49   1              IsPwrkeyInSysOn = TRUE;                                 //首先软开关用于系统启动，此后用于系统关闭
  50   1      }
  51          
C51 COMPILER V9.00   POWER_KEY                                                             12/22/2015 18:11:11 PAGE 2   

  52          
  53          //
  54          // POWER_KEY与普通的按键不同，连接按钮开关（软开关）时的主要作用还是系统开关机，当然，也允许复用短按功能。
  55          // 短按产生时，推送短按消息。超过短按区间，推送系统开关机消息。
  56          MESSAGE PowerKeyEventGet(VOID)                                                  
  57          {
  58   1              //DBG(("PowerKeyEventGet*******\n"));
  59   1              //DBG(("PowerKeyState:%bx\n", PowerKeyState));
  60   1              //DBG(("gIsPwrkeyPadOn:%bx\n", gIsPwrkeyPadOn));
  61   1              switch(PowerKeyState)
  62   1              {
  63   2                      case POWER_KEY_STATE_IDLE:
  64   2                              if(gIsPwrkeyPadOn == FALSE)
  65   2                              {
  66   3                                      IsPwrkeyInSysOn = FALSE;
  67   3                                      baGPIOCtrl[GPIO_D_OUT] &= ~0x20; //D5
  68   3                                      return MSG_NONE;
  69   3                              }
  70   2                              DBG(("GOTO POWER PRESS DOWN!\n"));
  71   2      
  72   2      #if defined(TIME_POWER_ON_HOLD)
  73   2                              if(IsPwrkeyInSysOn == TRUE)
  74   2                              {
  75   3                                      TimeOutSet(&PowerKeyWaitTimer, TIME_POWER_ON_HOLD);     
  76   3                              }
  77   2                              else
  78   2      #endif
  79   2                              {
  80   3                                      TimeOutSet(&PowerKeyWaitTimer, TIME_POWER_OFF_HOLD);
  81   3                              }
  82   2                              baGPIOCtrl[GPIO_D_OUT] |= 0x20; //D5
  83   2      
  84   2                              PowerKeyState = POWER_KEY_STATE_PRESS_DOWN;
  85   2                              break;
  86   2      
  87   2                      case POWER_KEY_STATE_PRESS_DOWN:
  88   2                              if(gIsPwrkeyPadOn == FALSE)
  89   2                              {
  90   3                                      IsPwrkeyInSysOn = FALSE;
  91   3                                      PowerKeyState = POWER_KEY_STATE_IDLE;
  92   3                                      baGPIOCtrl[GPIO_D_OUT] &= ~0x20; //D5
  93   3                                      
  94   3                                      return PowerKeyEvent[0];                        //return key sp value
  95   3                              }
  96   2                              else if(IsTimeOut(&PowerKeyWaitTimer))
  97   2                              {
  98   3                                      TimeOutSet(&PowerKeyWaitTimer, POWER_KEY_CPH_TIME);
  99   3                                      PowerKeyState = POWER_KEY_STATE_CP;
 100   3                                      if(IsPwrkeyInSysOn == TRUE)                     //系统启动时，推送MSG_SYS_ON消息，用于通知POWER_KEY开机保持时间已到
 101   3                                      {
 102   4                                              DBG(("PowerKeyEvent[1]:%bx\n", PowerKeyEvent[1]));
 103   4                                              return PowerKeyEvent[1];
 104   4                                      }
 105   3                                      else                                                            //系统启动之后，POWER_KEY的长按只发送MSG_SYS_OFF消息，用于关闭系统
 106   3                                      {
 107   4                                              DBG(("PowerKeyEvent[2]:%bx\n", PowerKeyEvent[2]));
 108   4                                              return PowerKeyEvent[2];
 109   4                                      }
 110   3                              }
 111   2                              break;
 112   2                              
 113   2                      case POWER_KEY_STATE_CP:
C51 COMPILER V9.00   POWER_KEY                                                             12/22/2015 18:11:11 PAGE 3   

 114   2                              if(gIsPwrkeyPadOn == FALSE)
 115   2                              {
 116   3                                      IsPwrkeyInSysOn = FALSE;                        //系统启动后，POWER_KEY长按的作用变为关机
 117   3                                      PowerKeyState = POWER_KEY_STATE_IDLE;
 118   3                              }
 119   2                              else if(IsTimeOut(&PowerKeyWaitTimer))
 120   2                              {
 121   3                                      TimeOutSet(&PowerKeyWaitTimer, POWER_KEY_CPH_TIME);
 122   3                                      if(IsPwrkeyInSysOn == FALSE)            //系统启动后，POWER_KEY的长按只发送MSG_SYS_OFF消息，用于关闭系统
 123   3                                      {
 124   4                                              DBG(("PowerKeyEvent[2]:%bx\n", PowerKeyEvent[2]));
 125   4                                              return PowerKeyEvent[2];
 126   4                                      }
 127   3                              }
 128   2                              break;  
 129   2                                              
 130   2                      default:
 131   2                              PowerKeyState = POWER_KEY_STATE_IDLE;
 132   2                              break;
 133   2              }
 134   1              return MSG_NONE;
 135   1      }
 136          
 137          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    258    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
