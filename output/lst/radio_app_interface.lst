C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RADIO_APP_INTERFACE
OBJECT MODULE PLACED IN .\output\obj\radio_app_interface.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE radio\radio_app_interface.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE IN
                    -CDIR(.\config;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\sl
                    -ave;.\bluetooth;.\i2c) DEBUG PRINT(.\output\lst\radio_app_interface.lst) OBJECT(.\output\obj\radio_app_interface.obj)

line level    source

   1          #include<string.h>
   2          #include <reg51.h>
   3          #include <intrins.h>
   4          #include "type.h"
   5          #include "utility.h"
   6          #include "debug.h"
   7          #include "i2c.h"
   8          #include "gpio.h"
   9          #include "mv_fm.h"
  10          #include "breakpoint.h"
  11          #include "24cxx.h"
  12          #include "sysctrl.h"
  13          #include "dac.h"
  14          #include "user_interface.h"
  15          #include "radio_app_interface.h"
  16          #include "display.h"
  17          
  18          
  19          #ifdef FUNC_RADIO_EN
  20          
  21          BYTE CODE gFmInGain[VOLUME_MAX + 1] = 
  22          {
  23          //FM音频从D3、D4口输出，然后从Line in通道输入到芯片内部
  24          //      63,     51,     39,     29,     20,     18,     16,     15,
  25          //      14,     13,     12,     11,     10,     9,              8,              7,
  26          //      6
  27          #if (VOLUME_MAX == 16)
                      63,             55,             47,             39,             35,             31,             27,             24,
                      23,             22,             21,             20,             19,             18,             17,             16,
                      15
              #else
  32                  63,             61,             59,             57,             55,             53,             51,             49,
  33                  47,             45,             43,             41,             39,             37,             35,             33,
  34                  31,             30,             29,             28,             27,             26,             25,             24,
  35                  23,             22,             21,             20,             19,             18,             17,             16,
  36                  15
  37          #endif
  38          };
  39          
  40          #ifdef FUNC_RADIO_ESD_AUTO_RESUME
  41          extern WORD gRadioCurrFreqBack;
  42          #endif
  43          
  44          
  45          // Save the information into external storage device.
  46          // If succeed return TRUE,otherwise return FALSE.
  47          BOOL RadioWriteData(VOID)
  48          {
  49   1      #ifdef FUNC_BREAK_POINT_EN      
  50   1              BP_SaveInfo((BYTE*)&gBreakPointInfo.PowerMemory.RadioData2Store, sizeof(gBreakPointInfo.PowerMemory.Radio
             -Data2Store));
  51   1              return TRUE;
  52   1      #else
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 2   

                      return FALSE;
              #endif
  55   1      }
  56          
  57          
  58          // Radio Module Initilization
  59          // If succeed return TRUE,otherwise return FALSE.
  60          // 只在系统复位(上电)时调用.
  61          VOID RadioInit(VOID)
  62          {
  63   1      //      DBG((">>RadioInit()\n"));
  64   1              
  65   1      #ifdef FUNC_BREAK_POINT_EN         
  66   1              if((gRadioData.StationSum > MAX_RADIO_STATION_NUM) 
  67   1              || (((gRadioData.CurrStation + 1) > gRadioData.StationSum) && gRadioData.StationSum)
  68   1              || ((gRadioData.Area1StationSum) > gRadioData.StationSum)
  69   1              || (gRadioData.CurrFreq > RADIO_UPPER_BOUND) || (gRadioData.CurrFreq < RADIO_LOWER_BOUND))              
  70   1      #endif          
  71   1              {
  72   2                      DBG(("\nRadio Module Debug Info:\n"));
  73   2                      DBG(("please check eeprom chip and fm chip\n"));
  74   2                      DBG(("If they work no problem,maybe the data in eeprom is empty\n"));
  75   2                      memset(&gRadioData, 0, sizeof(gRadioData));     
  76   2                      gRadioData.CurrFreq = RADIO_LOWER_BOUND;
  77   2              }
  78   1      
  79   1              RadioShowDebug(RadioShowPowerOn);
  80   1              gRadioCtrl.State = RADIO_INIT;
  81   1              gRadioCtrl.SeekMode = SEEK_NONE;
  82   1              Radio_Name = RADIO_NONE;
  83   1              RadioDisFlag = RadioDisCurFreNum;
  84   1      
  85   1              RadioWriteData();
  86   1      #ifdef RADIO_MVFM_EN
  87   1                              
  88   1              SetGpioRegBit(GPIO_FMD_OE, 0x04);
  89   1              ClrGpioRegBit(GPIO_FMD_IE, 0x04);
  90   1              SetGpioRegBit(GPIO_FMD_PU, 0x0C);
  91   1              ClrGpioRegBit(GPIO_FMD_PD, 0x0C);
  92   1              SetGpioRegBit(GPIO_FMD_OUT, 0x04);
  93   1      
  94   1              if(MVFM_ReadID())
  95   1              {
  96   2                      DBG(("MVFM!\n"));
  97   2                      Radio_Name = RADIO_MVFM;                                                
  98   2                      return;
  99   2              }
 100   1      #endif
 101   1              
 102   1      //      DBG(("<<RadioInit()\n"));
 103   1      }
 104          
 105          
 106          // Radio Power-On.
 107          VOID RadioPowerOn(VOID) 
 108          {
 109   1              switch(Radio_Name)
 110   1              {
 111   2      #ifdef RADIO_BK1080_EN  
                              case RADIO_BK1080:
                                      BK1080PowerOn();        
                                      break;
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 3   

              #endif
 116   2      
 117   2      #ifdef RADIO_KT0830_EN
                              case RADIO_KT0830E:
                                      KT0830PowerOn();
                                      break;
              #endif
 122   2      
 123   2      #ifdef RADIO_RDA5807_EN
                              case RADIO_RDA5807:
                                      RDA5807PowerOn();
                                      break;
              #endif
 128   2      
 129   2      #ifdef RADIO_QN8035_EN
                              case RADIO_QN8035:
                                      QN8035PowerOn();
                                      break;
              #endif
 134   2      
 135   2      #ifdef RADIO_MVFM_EN
 136   2                      case RADIO_MVFM:
 137   2                              MVFM_PowerOn();
 138   2                              break;
 139   2      #endif
 140   2      
 141   2                      default:
 142   2                              break;
 143   2              }
 144   1      }
 145          
 146          // Radio Power-Down.
 147          VOID RadioPowerDown(VOID)       
 148          {
 149   1              switch(Radio_Name)
 150   1              {
 151   2      #ifdef RADIO_BK1080_EN  
                              case RADIO_BK1080:
                                      BK1080PowerDown();      
                                      break;
              #endif
 156   2      
 157   2      #ifdef RADIO_KT0830_EN
                              case RADIO_KT0830E:
                                      KT0830PowerDown();
                                      break;
              #endif
 162   2      
 163   2      
 164   2      #ifdef RADIO_RDA5807_EN
                              case RADIO_RDA5807:
                                      RDA5807PowerDown();
                                      break;
              #endif
 169   2      
 170   2      #ifdef RADIO_QN8035_EN
                              case RADIO_QN8035:
                                      QN8035PowerDown();
                                      break;
              #endif
 175   2      
 176   2      #ifdef RADIO_MVFM_EN
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 4   

 177   2                      case RADIO_MVFM:
 178   2                              MVFM_PowerDown();
 179   2                              break;
 180   2      #endif
 181   2      
 182   2                      default:
 183   2                              break;
 184   2              }
 185   1      }
 186          
 187          
 188          // Radio Set Frequency
 189          // If succeed return TRUE,otherwise return FALSE.
 190          BOOL RadioSetFreq(VOID)
 191          {
 192   1              DBG(("Fre:%d\n", gRadioData.CurrFreq));
 193   1              
 194   1      #ifdef FUNC_RADIO_ESD_AUTO_RESUME
 195   1              gRadioCurrFreqBack = gRadioData.CurrFreq;
 196   1      #endif
 197   1              
 198   1              switch(Radio_Name)
 199   1              {
 200   2      #ifdef RADIO_RDA5807_EN
                              case RADIO_RDA5807:
                                      RDA5807SetFreq(gRadioData.CurrFreq);
                                      break;
              #endif
 205   2      
 206   2      #ifdef RADIO_BK1080_EN
                              case RADIO_BK1080:
                                      BK1080SetFreq(gRadioData.CurrFreq);
                                      break;
              #endif
 211   2      
 212   2      #ifdef RADIO_KT0830_EN
                              case RADIO_KT0830E:
                                      KT0830SetFreq(gRadioData.CurrFreq);
                                      break;
              #endif
 217   2      
 218   2      #ifdef RADIO_QN8035_EN
                              case RADIO_QN8035:                      
                                      QN8035SetFreq(gRadioData.CurrFreq);
                                      break;
              #endif          
 223   2      
 224   2      #ifdef RADIO_MVFM_EN
 225   2                      case RADIO_MVFM:
 226   2                              MVFM_SetFreq(gRadioData.CurrFreq);
 227   2                              break;
 228   2      #endif
 229   2      
 230   2                      default:
 231   2                              return FALSE;
 232   2              }
 233   1      
 234   1              if(gSys.MuteFg == TRUE)
 235   1              {
 236   2                      UnMute();
 237   2                      gSys.MuteFg = FALSE;    
 238   2                      
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 5   

 239   2      #ifdef FUNC_DISP_EN     
 240   2      #ifdef FUNC_SINGLE_LED_EN  
 241   2                      DispDev();
 242   2      #else
                              DispMute(); 
              #endif
 245   2      #endif
 246   2              }
 247   1              return TRUE;
 248   1      }
 249          
 250          
 251          //set fm-in volume.
 252          VOID RadioSetVolume(BYTE Volume)
 253          {
 254   1              InDacLineInGain(gFmInGain[Volume], gFmInGain[Volume]);
 255   1              DBG(("FM LR,V:%bd\n", Volume));
 256   1      }
 257          
 258          
 259          BOOL RadioMute(BOOL MuteFlag)
 260          {
 261   1              switch(Radio_Name)
 262   1              {
 263   2      #ifdef RADIO_RDA5807_EN
                              case RADIO_RDA5807:
                                      RDA5807Mute(MuteFlag);
                                      break;
              #endif
 268   2      
 269   2      #ifdef RADIO_BK1080_EN
                              case RADIO_BK1080:
                                      BK1080Mute(MuteFlag);
                                      break;
              #endif
 274   2      
 275   2      #ifdef RADIO_KT0830_EN
                              case RADIO_KT0830E:
                                      KT0830Mute(MuteFlag);
                                      break;
              #endif
 280   2      
 281   2      #ifdef RADIO_QN8035_EN
                              case RADIO_QN8035:
                                      QN8035Mute(MuteFlag);
                                      break;
              #endif
 286   2      
 287   2      #ifdef RADIO_MVFM_EN
 288   2                      case RADIO_MVFM:
 289   2                              MVFM_Mute(MuteFlag);
 290   2                              break;
 291   2      #endif
 292   2      
 293   2                      default:
 294   2                              return FALSE;
 295   2              }
 296   1      
 297   1              return TRUE;
 298   1      }
 299          
 300          
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 6   

 301          // Received Signal Strength Indication
 302          // RSSI_SEEK_THRESHOLD
 303          BYTE RadioRSSIRead(BOOL AutoSeekFlag)
 304          {
 305   1              switch(Radio_Name)
 306   1              {
 307   2      #ifdef RADIO_RDA5807_EN
                              case RADIO_RDA5807:
                                      return RDA5807SearchRead(AutoSeekFlag); 
              #endif
 311   2      
 312   2      #ifdef RADIO_BK1080_EN
                              case RADIO_BK1080:
                                      return BK1080SearchRead(AutoSeekFlag);
              #endif
 316   2      
 317   2      #ifdef RADIO_KT0830_EN
                              case RADIO_KT0830E:
                                      return KT0830SearchRead(AutoSeekFlag);
              #endif
 321   2      
 322   2      #ifdef RADIO_QN8035_EN
                              case RADIO_QN8035:
                                      return QN8035SearchRead(AutoSeekFlag);
              #endif
 326   2      
 327   2      #ifdef RADIO_MVFM_EN
 328   2                      case RADIO_MVFM:
 329   2                              return MVFM_SearchRead(AutoSeekFlag);
 330   2      #endif
 331   2      
 332   2                      default:
 333   2                              return FALSE;
 334   2              }
 335   1      }
 336          
 337          
 338          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -//                        
 339          // 以下函数接口被屏蔽
 340          // 用户可以根据项目需求打开函数定义
 341          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -//                        
 342          //VOID RadioSearchSet(WORD Freq)  
 343          //{
 344          //      switch(Radio_Name)
 345          //      {
 346          //#ifdef RADIO_RDA5807_EN
 347          //              case RADIO_RDA5807:
 348          //                      RDA5807SearchSet(Freq);
 349          //                      break;
 350          //#endif
 351          //
 352          //#ifdef RADIO_BK1080_EN
 353          //              case RADIO_BK1080:
 354          //                      BK1080SearchSet(Freq);
 355          //                      break;
 356          //#endif
 357          //
 358          //#ifdef RADIO_KT0830_EN
 359          //              case RADIO_KT0830E:
 360          //                      KT0830SearchSet(Freq);
C51 COMPILER V9.00   RADIO_APP_INTERFACE                                                   12/25/2015 17:22:50 PAGE 7   

 361          //                      break;
 362          //#endif
 363          //
 364          //#ifdef RADIO_QN8035_EN
 365          //              case RADIO_QN8035:                      
 366          //                      QN8035SearchSet(Freq);
 367          //                      break;
 368          //#endif                
 369          //      
 370          //#ifdef RADIO_MVFM_EN
 371          //              case RADIO_MVFM:
 372          //                      MVFM_SearchSet(Freq);
 373          //                      break;
 374          //#endif
 375          //
 376          //              default:
 377          //                      break;
 378          //      }
 379          //}
 380          
 381          
 382          //设置FM 的Mono  模式
 383          //VOID RadioMonoModeSet(BOOL MonoEnFlag)  
 384          //{
 385          //      MVFM_SetMonoMode(MonoEnFlag);
 386          //}
 387          
 388          
 389          //读取FM 信号的Stereo 和 Mono 状态
 390          //BOOL RadioGetStereoState(VOID)  
 391          //{
 392          //      return MVFM_GetStereoStatus();
 393          //}
 394          
 395          
 396          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    343    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
