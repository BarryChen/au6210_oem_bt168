C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BT
OBJECT MODULE PLACED IN .\output\obj\bt.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE bluetooth\bt.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\config
                    -;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\bluetoo
                    -th;.\i2c) DEBUG PRINT(.\output\lst\bt.lst) OBJECT(.\output\obj\bt.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "sysctrl.h"
   3          #include "device.h"
   4          #include "user_interface.h"
   5          #include "breakpoint.h"
   6          #include "debug.h"
   7          #include "sys_on_off.h"
   8          #include "otp_play.h"
   9          #include "pt231x.h"
  10          #include "slave_cmd.h"
  11          #include "slave_ctrl.h"
  12          #include "bluetooth_cmd.h"
  13          #include "uart.h"
  14          #include "bt.h"
  15          #include "GPIO.h"
  16          #include "display.h"
  17          #include "npca110x.h"
  18          
  19          #ifdef FUNC_BLUETOOTH_CSR_EN
  20          
  21          BOOL BtPowerIsOn = FALSE;
  22          
  23          #define         BT_ACTIVE_AFTERWARE     4000
  24          TIMER   BT_Statup;
  25          TIMER   BT_WaitConnectedTime;
  26          
  27          #if defined(FUNC_AUTO_BTSTANDBY)  
              TIMER   BT_standby;
              #define         BT_STAND_TIME   15000
              BYTE standby_flag;
              #endif
  32          
  33          //BOOL BtDelayOnFlag = TRUE;
  34          //TIMER BT_Delay_ON;
  35          //#define               BT_DELAY_ON_TIME        400
  36          
  37          
  38          
  39          TIMER   CSR_BTPOWEROFF_TIME;
  40          
  41          //short press：500ms
  42          //Double press：500ms
  43          //Long press:1000ms
  44          //Very long press:2500ms
  45          //Very Very long press:5000ms
  46          //Repeat time:800ms
  47          
  48          static BYTE BTjustEnter;
  49          BYTE PlayPairFlag;
  50          BLUETOOTH_STATUS gBlutoothStatus = BT_IDLE;
  51          extern BYTE Connect;
  52          static BOOL BtMuteFlag;
  53          BOOL BTPowerOffTime_Start = FALSE;
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 2   

  54          
  55          BYTE CODE gBTInGain[VOLUME_MAX + 1] = 
  56          {
  57          //注:Line In音频从E0、E1口输入到芯片内部，请用gFmInGain[VOLUME_MAX + 1]表中参数值
  58          //#if ((LINEIN_IO_TYPE == DAC_CH_E0_L) || (LINEIN_IO_TYPE == DAC_CH_E1_R) || (LINEIN_IO_TYPE == DAC_CH_E0E
             -1))
  59          //      63,             61,             59,             57,             55,             53,             51,             49,
  60          //      47,             45,             43,             41,             39,             37,             35,             33,
  61          //      31,             30,             29,             28,             27,             26,             25,             24,
  62          //      23,             22,             21,             20,             19,             18,             17,             16,
  63          //      15
  64          #if (VOLUME_MAX == 16)
                      63,             60,             58,             56,             54,             52,             50,             48,
                      46,             44,             42,             40,             36,             32,             28,             24,
                      20
              #else
  69          
  70          #ifdef AU6210K_ZB_BT007_CSR
  71                  63,
  72                  62,             58,             54,             51,             48,             45,             42,             39,
  73                  37,             35,             33,             31,             29,             27,             25,             23,
  74                  21,             20,             19,             18,             17,             16,             15,             14,
  75                  13,             12,             11,             10,             9,              8,              7,              6
  76          #else
                      63,
                      62,             58,             54,             51,             48,             45,             42,             39,
                      37,             35,             33,             31,             29,             27,             25,             23,
                      21,             19,             17,             16,             15,             14,             13,             12,
                      11,             10,             9,              8,              7,              6,              5,              4
              #endif  
  83          #endif
  84          };
  85          
  86          
  87          //set line-in volume.
  88          VOID SetBluetoothVolume(BYTE Vol)
  89          {
  90   1              InDacLineInGain(gBTInGain[Vol], gBTInGain[Vol]);
  91   1      }
  92          
  93          
  94          VOID BluetoothCtrlInit(VOID)
  95          {
  96   1          
  97   1              BTjustEnter = 1;
  98   1              PlayPairFlag = 1;
  99   1              BTIO_PORT_MUTE_INIT();
 100   1              //与CSR连接的IO口初始化
 101   1              BTIO_PORT_BLUE_LED_INIT();
 102   1              BTIO_PORT_RED_LED_INIT();
 103   1              //MCUIO_PORT_red_LED_INIT();//开机的时候初始化了灯的状态，此处不要再设置
 104   1              //MCUIO_PORT_blue_LED_INIT();
 105   1      
 106   1      
 107   1              //TimeOutSet(&BT_Delay_ON, BT_DELAY_ON_TIME);   
 108   1              //BT_POWER_ON_INIT();
 109   1              //
 110   1      
 111   1      #if defined(FUNC_AUTO_BTSTANDBY)  
                  TimeOutSet(&BT_standby, BT_STAND_TIME);     
              #endif  
 114   1      
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 3   

 115   1      #if defined(AU6210K_NR_D_8_CSRBT)
              #else
 117   1              #if BLUETOOTH_CH_TYPE == DAC_CH_LINEIN
 118   1              InDacChannelSel(BLUETOOTH_CH_TYPE);
 119   1              #else
                      SET_E0_ANALOG_IN();     //将E0E1配置为模拟端口
                      SET_E1_ANALOG_IN();
                      #endif
 123   1      #endif
 124   1      
 125   1      /*#ifdef AU6210K_NR_D_8_CSRBT
 126   1              NPCA110X_ADC_Input_CH_Select(INPUT_CH1);
 127   1              NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
 128   1      #else
 129   1              SetBluetoothVolume(gSys.Volume);
 130   1      #endif
 131   1      */
 132   1      #ifdef FUNC_CSR_CONTROL_BT_VOL
                              SetBluetoothVolume(VOLUME_MAX);
              #else
 135   1                      SetBluetoothVolume(gSys.Volume);
 136   1              
 137   1      #endif
 138   1      
 139   1              UnMute();
 140   1      #ifdef FUNC_EXMUTE_EN
                      if (BTisMute())
                      {
                              BtMuteFlag = TRUE;
                              ExMuteOn();
                      }
                      else
                      {
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                              if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      BtMuteFlag = FALSE;
                                      ExMuteOff();
                                      DBG1(("r0000r\n"));
                      }
              
              #ifdef BT_BtPOWEROFF_TIME
                      if (BTisMute() && BtMuteFlag)
                      {
                              BtMuteFlag = TRUE;
              #if defined(AU6210K_ZB_BT007_CSR)
                              TimeOutSet(&CSR_BTPOWEROFF_TIME, BT_BtPOWEROFF_TIME);
                              BTPowerOffTime_Start =  TRUE;
                              DBG1(("BTPowerOffTime_Start =  TRUE;\n"));
              #endif          
                      }
              #endif
              
              #endif
 169   1              
 170   1              DBG(("<<LineInCtrlInit()\n"));
 171   1      #ifdef FUNC_BREAK_POINT_EN
 172   1              BP_SaveInfo(&gBreakPointInfo.PowerMemory.SystemMode, sizeof(gBreakPointInfo.PowerMemory.SystemMode));
 173   1      #endif
 174   1      
 175   1              BT_POWER_H();
 176   1              BtPowerIsOn = TRUE;
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 4   

 177   1      
 178   1      
 179   1      }
 180          
 181          
 182          // LineIn IO DeInitialization.
 183          VOID BluetothCtrlEnd(VOID)
 184          {
 185   1      #ifdef AU6210K_NR_D_8_CSRBT
                      NPCA110X_SetOutMute(TRUE);
              #else
 188   1      #endif
 189   1              MuteOn(TRUE,TRUE);
 190   1          InDacMuteEn();
 191   1              InDacChannelSel(DAC_CH_NONE);
 192   1              
 193   1      #ifdef FUNC_BT_CHAN_AUTO
 194   1              //BT_POWER_L();
 195   1      #endif
 196   1      }
 197          
 198          
 199          BOOL Bluetooth_BlueLED()
 200          {
 201   1              //BTIO_PORT_BLUE_LED_INIT();
 202   1              //WaitUs(10);
 203   1              if(GET_BLUE_LED_STATUS())
 204   1                      return FALSE;
 205   1              else
 206   1                      return TRUE;
 207   1      }
 208          
 209          BOOL Bluetooth_RedLED()
 210          {
 211   1              //BTIO_PORT_RED_LED_INIT();
 212   1              //WaitUs(10);
 213   1              if(GET_RED_LED_STATUS())
 214   1                      return FALSE;
 215   1              else
 216   1                      return TRUE;
 217   1      }
 218          
 219          BOOL BTisMute()
 220          {
 221   1              //BTIO_PORT_MUTE_INIT();
 222   1              //WaitUs(10);
 223   1              if(GET_BT_MUTE_STATUS())
 224   1                      return FALSE;
 225   1              else
 226   1                      return TRUE;
 227   1      
 228   1      }
 229          
 230          BOOL GetBtMuteFlag(void)
 231          {
 232   1              return BtMuteFlag;
 233   1      }
 234          VOID BluetoothStateCtrl(VOID)
 235          {   
 236   1          MESSAGE Event;
 237   1              BYTE minvolflag = 0;
 238   1              BYTE maxvolflag = 0;
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 5   

 239   1      
 240   1              /*if(BtDelayOnFlag)
 241   1              {
 242   1                      if(IsTimeOut(&BT_Delay_ON))
 243   1                      {
 244   1                              BtDelayOnFlag = FALSE;
 245   1                              BT_POWER_H();
 246   1                      }
 247   1              }*/
 248   1      #if 0
                      if (IsTimeOut(&BT_Statup) && BTjustEnter && gSys.Volume > VOLUME_MIN)
                      {
                              DBG(("active bluetooth time out.\n"));
                              BTjustEnter = 0;                
                              //BT_POWER_H();
                              //开声音
              
                              //WaitMs(300);//等待通道切完后才解mute
                              ExMuteOff();    
                      }
              #endif  
 260   1              /*if (IsTimeOut(&BT_WaitConnectedTime) && PlayPairFlag)
 261   1              {
 262   1      //              TimeOutSet(&BT_WaitConnectedTime,0);
 263   1                      PlayPairFlag = 0;
 264   1                      #ifdef FUNC_SPI_KEY_SOUND_EN
 265   1                      SPI_PlaySelectNum(SPIPLAY_SONG_WAITCONNECTION,0);
 266   1                      InDacChannelSel(BLUETOOTH_CJ_IO_TYPE);
 267   1                      UnMute();
 268   1                      #endif
 269   1              }*/
 270   1      #if 0//defined(AU6210K_ZB_BT007_CSR)||defined(AU6210K_LK_SJ_CSRBT)
              //DBG1(("BtMuteFlag = %x\n",BtMuteFlag));
              
              if (Bluetooth_BlueLED())
                      {
                              LED_BLUE_H();
                      }
                      else
                              LED_BLUE_L();
              
              /*      if (Bluetooth_RedLED())
                      {
                              LED_RED_H();
                      }
                      else
                              LED_RED_L();*/
              
              #else
 288   1      
 289   1      //mute检测循环检测的方法，用定时器此处不要
 290   1      #if defined(AU6210K_ZB_BT007_CSR)|| defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)
 291   1      
 292   1      //#if defiend(AU6210K_NR_D_8_CSRBT) || defined(AU6210K_LK_SJ_CSRBT) || defiend(AU6210K_ZB_BT007_CSR)
 293   1      #ifdef FUNC_EXMUTE_EN
              
                      if (BTisMute() && !BtMuteFlag)
                      {
                              BtMuteFlag = TRUE;
              #if defined(AU6210K_ZB_BT007_CSR)
              #ifdef BT_BtPOWEROFF_TIME
                              TimeOutSet(&CSR_BTPOWEROFF_TIME, BT_BtPOWEROFF_TIME);
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 6   

                              BTPowerOffTime_Start =  TRUE;
                              DBG1(("BTPowerOffTime_Start =  TRUE;\n"));
              #endif
              #endif          
                      
                      }
                      if ((!BTisMute() && BtMuteFlag) && (gSys.Volume > VOLUME_MIN))
                      {
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                              if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      BtMuteFlag = FALSE;
                                      
                                      DBG1(("r----\n"));
              #if defined(AU6210K_ZB_BT007_CSR)       
              #ifdef BT_BtPOWEROFF_TIME
                                      TimeOutSet(&CSR_BTPOWEROFF_TIME, 0);
                                      BTPowerOffTime_Start =  FALSE;
                                      DBG1(("BTPowerOffTime_Start =  FALSE;\n"));
              #endif
              #endif                  
                      }
                      
                      if(BtMuteFlag)
                              ExMuteOn();
                      else
                      {
                              ExMuteOff();
                      }
              #endif
 331   1      #endif
 332   1      
 333   1      
 334   1      #if defined(AU6210K_ZB_BT007_CSR)
 335   1      #ifdef BT_BtPOWEROFF_TIME
                      if(IsTimeOut(&CSR_BTPOWEROFF_TIME) && BTPowerOffTime_Start)
                  {
                      //关机流程
                      DBG1(("power off doing\n"));
              
                              if(BTisMute())
                              {
                                      BT_POWER_L();
                                      WaitMs(2);
                                      SPI_PlaySelectNum(SPIPLAY_SONG_POWEROFF, 0);//关机提示音
                                      WaitMs(1000);
                                      SystemOff();
                              }else
                              {
                                      BTPowerOffTime_Start = FALSE;
                                      TimeOutSet(&CSR_BTPOWEROFF_TIME, 0);
                              }
                  }
              #endif
 355   1      #endif  
 356   1      
 357   1      #if defined(FUNC_AUTO_BTSTANDBY)  
                      if((Connect == 0) && (IsTimeOut(&BT_standby)))
                      {
                          BT_POWER_L();
                              standby_flag = 1;
                      }
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 7   

                      else
                      {
                              BT_POWER_H();
                              standby_flag = 0;
                      }
              #endif  
 369   1      
 370   1      #endif  
 371   1      
 372   1              Event = MessageGet(MSG_FIFO_KEY);
 373   1          switch(Event)
 374   1              {
 375   2      #ifndef FUNC_CSR_CONTROL_BT_VOL //if no def
 376   2                      case MSG_VOL_ADD:                       
 377   2                              VolumeAdjust(UP);
 378   2      #ifdef AU6210K_MINI503 
 379   2                              if (gSys.Volume >= VOLUME_MAX)
 380   2                              {
 381   3                                      SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);
 382   3                              }
 383   2      #endif
 384   2                              break;
 385   2              
 386   2                      case MSG_VOL_SUB:
 387   2                              VolumeAdjust(DOWN);
 388   2      #ifdef AU6210K_MINI503
 389   2                              if (gSys.Volume <= VOLUME_MIN)
 390   2                              {
 391   3                                              SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);
 392   3                              }
 393   2      #endif
 394   2      
 395   2                              break;          
 396   2      #endif          
 397   2      /*
 398   2              case MSG_V_ADD:
 399   2              case MSG_VOL_ADD:                       
 400   2      #if defined(FUNC_PT231X_EN) && !defined(AU6210K_NR_D_8_CSRBT)
 401   2                      VolType = VOL_MAIN;
 402   2                      PT2313VolAdd();         
 403   2      #else
 404   2                      if(gSys.Volume < VOLUME_MAX)
 405   2                      {
 406   2                              maxvolflag = 1;
 407   2                              VolumeAdjust(UP);
 408   2                      }
 409   2      #endif    
 410   2      #if defined(AU6210K_NR_D_9X_XJ_HTS)|| defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)|| define
             -d(AU6210K_ZB_BT007_CSR)
 411   2                      if (Event == MSG_V_ADD && gSys.Volume == VOLUME_MAX && !maxvolflag)
 412   2                      {
 413   2                              SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);          
 414   2                              if( !GetBtMuteFlag())
 415   2                              {
 416   2                              DBG1(("7777\m"));
 417   2                                      UnMute();
 418   2                              }
 419   2                              
 420   2                      }
 421   2                      
 422   2      #endif
 423   2                      break;
C51 COMPILER V9.00   BT                                                                    12/30/2015 18:11:26 PAGE 8   

 424   2              case MSG_V_SUB:         
 425   2              case MSG_VOL_SUB:                       
 426   2      #if defined(FUNC_PT231X_EN) && !defined(AU6210K_NR_D_8_CSRBT)
 427   2                      VolType = VOL_MAIN;
 428   2                      PT2313VolSub();         
 429   2      #else
 430   2                      if(gSys.Volume > VOLUME_MIN)
 431   2                      {
 432   2                              minvolflag = 1;
 433   2                              VolumeAdjust(DOWN);
 434   2                      }
 435   2      #endif
 436   2      #if defined(AU6210K_NR_D_9X_XJ_HTS) || defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)|| defin
             -ed(AU6210K_ZB_BT007_CSR)
 437   2                      if (Event == MSG_V_SUB && gSys.Volume == VOLUME_MIN && !minvolflag)
 438   2                      {
 439   2                              SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);
 440   2                              if( !GetBtMuteFlag())
 441   2                              {
 442   2                              DBG1(("5555\m"));
 443   2                                      UnMute();
 444   2                              }
 445   2                              //UnMute();
 446   2                      }
 447   2      #endif
 448   2                      break;  */      
 449   2                      
 450   2              default:
 451   2                      break;
 452   2              }
 453   1      }
 454          #endif
 455          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    301    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =     21       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
