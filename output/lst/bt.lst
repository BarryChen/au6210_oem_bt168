C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BT
OBJECT MODULE PLACED IN .\output\obj\bt.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE bluetooth\bt.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\config
                    -;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\bluetoo
                    -th;.\i2c) DEBUG PRINT(.\output\lst\bt.lst) OBJECT(.\output\obj\bt.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "sysctrl.h"
   3          #include "device.h"
   4          #include "user_interface.h"
   5          #include "breakpoint.h"
   6          #include "debug.h"
   7          #include "sys_on_off.h"
   8          #include "otp_play.h"
   9          #include "pt231x.h"
  10          #include "slave_cmd.h"
  11          #include "slave_ctrl.h"
  12          #include "bluetooth_cmd.h"
  13          #include "uart.h"
  14          #include "bt.h"
  15          #include "GPIO.h"
  16          #include "display.h"
  17          #include "npca110x.h"
  18          
  19          #ifdef FUNC_BLUETOOTH_CSR_EN
  20          
  21          #define         BT_ACTIVE_AFTERWARE     4000
  22          TIMER   BT_Statup;
  23          TIMER   BT_WaitConnectedTime;
  24          
  25          #if defined(FUNC_AUTO_BTSTANDBY)  
              TIMER   BT_standby;
              #define         BT_STAND_TIME   15000
              BYTE standby_flag;
              #endif
  30          
  31          BOOL BtDelayOnFlag = TRUE;
  32          TIMER BT_Delay_ON;
  33          #define         BT_DELAY_ON_TIME        2000
  34          
  35          
  36          
  37          TIMER   CSR_BTPOWEROFF_TIME;
  38          
  39          //short press：500ms
  40          //Double press：500ms
  41          //Long press:1000ms
  42          //Very long press:2500ms
  43          //Very Very long press:5000ms
  44          //Repeat time:800ms
  45          
  46          static BYTE BTjustEnter;
  47          BYTE PlayPairFlag;
  48          BLUETOOTH_STATUS gBlutoothStatus = BT_IDLE;
  49          extern BYTE Connect;
  50          static BOOL BtMuteFlag;
  51          BOOL BTPowerOffTime_Start = FALSE;
  52          
  53          BYTE CODE gBTInGain[VOLUME_MAX + 1] = 
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 2   

  54          {
  55          //注:Line In音频从E0、E1口输入到芯片内部，请用gFmInGain[VOLUME_MAX + 1]表中参数值
  56          //#if ((LINEIN_IO_TYPE == DAC_CH_E0_L) || (LINEIN_IO_TYPE == DAC_CH_E1_R) || (LINEIN_IO_TYPE == DAC_CH_E0E
             -1))
  57          //      63,             61,             59,             57,             55,             53,             51,             49,
  58          //      47,             45,             43,             41,             39,             37,             35,             33,
  59          //      31,             30,             29,             28,             27,             26,             25,             24,
  60          //      23,             22,             21,             20,             19,             18,             17,             16,
  61          //      15
  62          #if (VOLUME_MAX == 16)
                      63,             60,             58,             56,             54,             52,             50,             48,
                      46,             44,             42,             40,             36,             32,             28,             24,
                      20
              #else
  67          
  68          #ifdef AU6210K_ZB_BT007_CSR
  69                  63,
  70                  62,             58,             54,             51,             48,             45,             42,             39,
  71                  37,             35,             33,             31,             29,             27,             25,             23,
  72                  21,             20,             19,             18,             17,             16,             15,             14,
  73                  13,             12,             11,             10,             9,              8,              7,              6
  74          #else
                      63,
                      62,             58,             54,             51,             48,             45,             42,             39,
                      37,             35,             33,             31,             29,             27,             25,             23,
                      21,             19,             17,             16,             15,             14,             13,             12,
                      11,             10,             9,              8,              7,              6,              5,              4
              #endif  
  81          #endif
  82          };
  83          
  84          
  85          //set line-in volume.
  86          VOID SetBluetoothVolume(BYTE Vol)
  87          {
  88   1              InDacLineInGain(gBTInGain[Vol], gBTInGain[Vol]);
  89   1      }
  90          
  91          
  92          VOID BluetoothCtrlInit(VOID)
  93          {
  94   1          
  95   1              BTjustEnter = 1;
  96   1              PlayPairFlag = 1;
  97   1              BTIO_PORT_MUTE_INIT();
  98   1      #ifdef CSR_CALL_CHECK_PORT
  99   1              BTIO_PORT_CALL_INIT();
 100   1      #endif
 101   1              //与CSR连接的IO口初始化
 102   1              BTIO_PORT_BLUE_LED_INIT();
 103   1              BTIO_PORT_RED_LED_INIT();
 104   1              //MCUIO_PORT_red_LED_INIT();//开机的时候初始化了灯的状态，此处不要再设置
 105   1              //MCUIO_PORT_blue_LED_INIT();
 106   1      
 107   1      
 108   1              TimeOutSet(&BT_Delay_ON, BT_DELAY_ON_TIME);     
 109   1              //BT_POWER_ON_INIT();
 110   1              //BT_POWER_H();
 111   1      
 112   1      #if defined(FUNC_AUTO_BTSTANDBY)  
                  TimeOutSet(&BT_standby, BT_STAND_TIME);     
              #endif  
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 3   

 115   1      
 116   1      #if defined(AU6210K_NR_D_8_CSRBT)
              #else
 118   1              #if BLUETOOTH_CH_TYPE == DAC_CH_LINEIN
 119   1              InDacChannelSel(BLUETOOTH_CH_TYPE);
 120   1              #else
                      SET_E0_ANALOG_IN();     //将E0E1配置为模拟端口
                      SET_E1_ANALOG_IN();
                      #endif
 124   1      #endif
 125   1      
 126   1      /*#ifdef AU6210K_NR_D_8_CSRBT
 127   1              NPCA110X_ADC_Input_CH_Select(INPUT_CH1);
 128   1              NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
 129   1      #else
 130   1              SetBluetoothVolume(gSys.Volume);
 131   1      #endif
 132   1      */
 133   1      #ifdef FUNC_CSR_CONTROL_BT_VOL
                              SetBluetoothVolume(VOLUME_MAX);
              #else
 136   1                      SetBluetoothVolume(gSys.Volume);
 137   1              
 138   1      #endif
 139   1      
 140   1              UnMute();
 141   1      #ifdef FUNC_EXMUTE_EN
                      if (BTisMute())
                      {
                              BtMuteFlag = TRUE;
                              ExMuteOn();
                      }
                      else
                      {
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                              if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      BtMuteFlag = FALSE;
                                      ExMuteOff();
                                      DBG1(("r0000r\n"));
                      }
              
              #ifdef BT_BtPOWEROFF_TIME
                      if (BTisMute() && BtMuteFlag)
                      {
                              BtMuteFlag = TRUE;
              #if defined(AU6210K_ZB_BT007_CSR)
                              TimeOutSet(&CSR_BTPOWEROFF_TIME, BT_BtPOWEROFF_TIME);
                              BTPowerOffTime_Start =  TRUE;
                              DBG1(("BTPowerOffTime_Start =  TRUE;\n"));
              #endif          
                      }
              #endif
              
              #endif
 170   1              
 171   1              DBG(("<<LineInCtrlInit()\n"));
 172   1      #ifdef FUNC_BREAK_POINT_EN
 173   1              BP_SaveInfo(&gBreakPointInfo.PowerMemory.SystemMode, sizeof(gBreakPointInfo.PowerMemory.SystemMode));
 174   1      #endif
 175   1      
 176   1      
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 4   

 177   1      }
 178          
 179          
 180          // LineIn IO DeInitialization.
 181          VOID BluetothCtrlEnd(VOID)
 182          {
 183   1      #ifdef AU6210K_NR_D_8_CSRBT
                      NPCA110X_SetOutMute(TRUE);
              #else
 186   1      #endif
 187   1              MuteOn(TRUE,TRUE);
 188   1          InDacMuteEn();
 189   1              InDacChannelSel(DAC_CH_NONE);
 190   1              
 191   1      #ifdef FUNC_BT_CHAN_AUTO
 192   1              //BT_POWER_L();
 193   1      #endif
 194   1      }
 195          
 196          
 197          BOOL Bluetooth_BlueLED()
 198          {
 199   1              //BTIO_PORT_BLUE_LED_INIT();
 200   1              //WaitUs(10);
 201   1              if(GET_BLUE_LED_STATUS())
 202   1                      return FALSE;
 203   1              else
 204   1                      return TRUE;
 205   1      }
 206          
 207          BOOL Bluetooth_RedLED()
 208          {
 209   1              //BTIO_PORT_RED_LED_INIT();
 210   1              //WaitUs(10);
 211   1              if(GET_RED_LED_STATUS())
 212   1                      return FALSE;
 213   1              else
 214   1                      return TRUE;
 215   1      }
 216          
 217          BOOL BTisMute()
 218          {
 219   1              //BTIO_PORT_MUTE_INIT();
 220   1              //WaitUs(10);
 221   1              if(GET_BT_MUTE_STATUS())
 222   1                      return FALSE;
 223   1              else
 224   1                      return TRUE;
 225   1      
 226   1      }
 227          
 228          BOOL GetBtMuteFlag(void)
 229          {
 230   1              return BtMuteFlag;
 231   1      }
 232          VOID BluetoothStateCtrl(VOID)
 233          {   
 234   1          MESSAGE Event;
 235   1              BYTE minvolflag = 0;
 236   1              BYTE maxvolflag = 0;
 237   1      
 238   1              if(BtDelayOnFlag)
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 5   

 239   1              {
 240   2                      if(IsTimeOut(&BT_Delay_ON))
 241   2                      {
 242   3                              BtDelayOnFlag = FALSE;
 243   3                              BT_POWER_H();
 244   3                      }
 245   2              }
 246   1      #if 0
                      if (IsTimeOut(&BT_Statup) && BTjustEnter && gSys.Volume > VOLUME_MIN)
                      {
                              DBG(("active bluetooth time out.\n"));
                              BTjustEnter = 0;                
                              //BT_POWER_H();
                              //开声音
              
                              //WaitMs(300);//等待通道切完后才解mute
                              ExMuteOff();    
                      }
              #endif  
 258   1              /*if (IsTimeOut(&BT_WaitConnectedTime) && PlayPairFlag)
 259   1              {
 260   1      //              TimeOutSet(&BT_WaitConnectedTime,0);
 261   1                      PlayPairFlag = 0;
 262   1                      #ifdef FUNC_SPI_KEY_SOUND_EN
 263   1                      SPI_PlaySelectNum(SPIPLAY_SONG_WAITCONNECTION,0);
 264   1                      InDacChannelSel(BLUETOOTH_CJ_IO_TYPE);
 265   1                      UnMute();
 266   1                      #endif
 267   1              }*/
 268   1      #if 0//defined(AU6210K_ZB_BT007_CSR)||defined(AU6210K_LK_SJ_CSRBT)
              //DBG1(("BtMuteFlag = %x\n",BtMuteFlag));
              
              if (Bluetooth_BlueLED())
                      {
                              LED_BLUE_H();
                      }
                      else
                              LED_BLUE_L();
              
              /*      if (Bluetooth_RedLED())
                      {
                              LED_RED_H();
                      }
                      else
                              LED_RED_L();*/
              
              #else
 286   1      
 287   1      //mute检测循环检测的方法，用定时器此处不要
 288   1      #if defined(AU6210K_ZB_BT007_CSR)|| defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)
 289   1      
 290   1      //#if defiend(AU6210K_NR_D_8_CSRBT) || defined(AU6210K_LK_SJ_CSRBT) || defiend(AU6210K_ZB_BT007_CSR)
 291   1      #ifdef FUNC_EXMUTE_EN
              
                      if (BTisMute() && !BtMuteFlag)
                      {
                              BtMuteFlag = TRUE;
              #if defined(AU6210K_ZB_BT007_CSR)
              #ifdef BT_BtPOWEROFF_TIME
                              TimeOutSet(&CSR_BTPOWEROFF_TIME, BT_BtPOWEROFF_TIME);
                              BTPowerOffTime_Start =  TRUE;
                              DBG1(("BTPowerOffTime_Start =  TRUE;\n"));
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 6   

              #endif
              #endif          
                      
                      }
                      if ((!BTisMute() && BtMuteFlag) && (gSys.Volume > VOLUME_MIN))
                      {
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                              if(IsHeadphoneLinkFlag == FALSE)
              #endif
                                      BtMuteFlag = FALSE;
                                      
                                      DBG1(("r----\n"));
              #if defined(AU6210K_ZB_BT007_CSR)       
              #ifdef BT_BtPOWEROFF_TIME
                                      TimeOutSet(&CSR_BTPOWEROFF_TIME, 0);
                                      BTPowerOffTime_Start =  FALSE;
                                      DBG1(("BTPowerOffTime_Start =  FALSE;\n"));
              #endif
              #endif                  
                      }
                      
                      if(BtMuteFlag)
                              ExMuteOn();
                      else
                      {
                              ExMuteOff();
                      }
              #endif
 329   1      #endif
 330   1      
 331   1      
 332   1      #if defined(AU6210K_ZB_BT007_CSR)
 333   1      #ifdef BT_BtPOWEROFF_TIME
                      if(IsTimeOut(&CSR_BTPOWEROFF_TIME) && BTPowerOffTime_Start)
                  {
                      //关机流程
                      DBG1(("power off doing\n"));
              
                              if(BTisMute())
                              {
                                      BT_POWER_L();
                                      WaitMs(2);
                                      SPI_PlaySelectNum(SPIPLAY_SONG_POWEROFF, 0);//关机提示音
                                      WaitMs(1000);
                                      SystemOff();
                              }else
                              {
                                      BTPowerOffTime_Start = FALSE;
                                      TimeOutSet(&CSR_BTPOWEROFF_TIME, 0);
                              }
                  }
              #endif
 353   1      #endif  
 354   1      
 355   1      #if defined(FUNC_AUTO_BTSTANDBY)  
                      if((Connect == 0) && (IsTimeOut(&BT_standby)))
                      {
                          BT_POWER_L();
                              standby_flag = 1;
                      }
                      else
                      {
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 7   

                              BT_POWER_H();
                              standby_flag = 0;
                      }
              #endif  
 367   1      
 368   1      #endif  
 369   1      
 370   1              Event = MessageGet(MSG_FIFO_KEY);
 371   1          switch(Event)
 372   1              {
 373   2      #ifndef FUNC_CSR_CONTROL_BT_VOL //if no def
 374   2                      case MSG_VOL_ADD:                       
 375   2                              VolumeAdjust(UP);
 376   2      #ifdef AU6210K_MINI503 
 377   2                              if (gSys.Volume >= VOLUME_MAX)
 378   2                              {
 379   3                                      SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);
 380   3                              }
 381   2      #endif
 382   2                              break;
 383   2              
 384   2                      case MSG_VOL_SUB:
 385   2                              VolumeAdjust(DOWN);
 386   2      #ifdef AU6210K_MINI503
 387   2                              if (gSys.Volume <= VOLUME_MIN)
 388   2                              {
 389   3                                              SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);
 390   3                              }
 391   2      #endif
 392   2      
 393   2                              break;          
 394   2      #endif          
 395   2      /*
 396   2              case MSG_V_ADD:
 397   2              case MSG_VOL_ADD:                       
 398   2      #if defined(FUNC_PT231X_EN) && !defined(AU6210K_NR_D_8_CSRBT)
 399   2                      VolType = VOL_MAIN;
 400   2                      PT2313VolAdd();         
 401   2      #else
 402   2                      if(gSys.Volume < VOLUME_MAX)
 403   2                      {
 404   2                              maxvolflag = 1;
 405   2                              VolumeAdjust(UP);
 406   2                      }
 407   2      #endif    
 408   2      #if defined(AU6210K_NR_D_9X_XJ_HTS)|| defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)|| define
             -d(AU6210K_ZB_BT007_CSR)
 409   2                      if (Event == MSG_V_ADD && gSys.Volume == VOLUME_MAX && !maxvolflag)
 410   2                      {
 411   2                              SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);          
 412   2                              if( !GetBtMuteFlag())
 413   2                              {
 414   2                              DBG1(("7777\m"));
 415   2                                      UnMute();
 416   2                              }
 417   2                              
 418   2                      }
 419   2                      
 420   2      #endif
 421   2                      break;
 422   2              case MSG_V_SUB:         
 423   2              case MSG_VOL_SUB:                       
C51 COMPILER V9.00   BT                                                                    12/29/2015 13:58:52 PAGE 8   

 424   2      #if defined(FUNC_PT231X_EN) && !defined(AU6210K_NR_D_8_CSRBT)
 425   2                      VolType = VOL_MAIN;
 426   2                      PT2313VolSub();         
 427   2      #else
 428   2                      if(gSys.Volume > VOLUME_MIN)
 429   2                      {
 430   2                              minvolflag = 1;
 431   2                              VolumeAdjust(DOWN);
 432   2                      }
 433   2      #endif
 434   2      #if defined(AU6210K_NR_D_9X_XJ_HTS) || defined(AU6210K_NR_D_8_CSRBT)||defined(AU6210K_LK_SJ_CSRBT)|| defin
             -ed(AU6210K_ZB_BT007_CSR)
 435   2                      if (Event == MSG_V_SUB && gSys.Volume == VOLUME_MIN && !minvolflag)
 436   2                      {
 437   2                              SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);
 438   2                              if( !GetBtMuteFlag())
 439   2                              {
 440   2                              DBG1(("5555\m"));
 441   2                                      UnMute();
 442   2                              }
 443   2                              //UnMute();
 444   2                      }
 445   2      #endif
 446   2                      break;  */      
 447   2                      
 448   2              default:
 449   2                      break;
 450   2              }
 451   1      }
 452          #endif
 453          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    368    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =     26       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
