C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PLAYCTRL
OBJECT MODULE PLACED IN .\output\obj\playctrl.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE play\playctrl.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\confi
                    -g;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\blueto
                    -oth;.\i2c) DEBUG PRINT(.\output\lst\playctrl.lst) OBJECT(.\output\obj\playctrl.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "sysctrl.h"
   3          #include "playctrl.h"
   4          #include "audio_stream.h"
   5          #include "breakpoint.h"
   6          #include "rtc.h"
   7          #include "user_interface.h"
   8          #include "debug.h"
   9          #include "display.h"
  10          #include "sys_on_off.h"
  11          #include "device.h"
  12          #include "spi_fs.h"
  13          #include "otp_play.h"
  14          #include "pt231x.h"
  15          #include "npca110x.h"
  16          
  17          
  18          extern WORD gFileRdSize;
  19          #ifdef  FUNC_NUMBER_KEY_EN
  20          extern WORD     gRecvNum;
  21          #endif
  22          #ifdef FUNC_NPCA110X_EN
              extern BOOL isDefaultBass;
              #endif
  25          
  26          #ifdef  FUNC_SPI_UPDATE_EN
              extern BYTE gIsMVFFileFind;
              #endif
  29          
  30          
  31          //播放监视定时器
  32          #define PLAY_WATCH_TIME                         10000
  33          TIMER   gPlayWatchTimer;
  34          
  35          TIMER   VolumeUpTimer;
  36          BYTE    VolumeVal = 0;
  37          BOOL    IsVolumeUpEnd = FALSE;
  38          TIMER   SDCARDPOWEROFF_TIME;
  39          static BOOL PowerOffTimeBeginFlag = FALSE;
  40          BOOL SDCARDPowerOffTime_Start = FALSE;
  41          
  42          
  43          
  44          
  45          //快速切歌定时器
  46          #ifdef FUNC_OPEN_FILE_DELAY_EN
              #define OPEN_FILE_DELAY_TIME            1000
              
              static TIMER    s_OpenFileDelayTimer;
              static BOOL     s_IsOpenFileDelay;
              #endif
  52          
  53          DWORD   g_OldPlayTime = -1;
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 2   

  54          
  55          
  56          PLAY_CTRL       gPlayCtrl;
  57          BOOL            s_BreakPointFlag;
  58          //extern BOOL IsFirstSetFrame;
  59          
  60          #ifdef FUNC_BREAK_POINT_EN
  61          extern BYTE gFileNameCrc8;//记录CRC8 校验值
  62          extern WORD gCurFileNum;
  63          extern WORD gCurFileNumInFolder;
  64          extern WORD gCurFolderNum;
  65          #endif
  66          
  67          
  68          
  69          //EQ数组，共10个分段，每个分段的频率范围分别是：
  70          //20HZ-680HZ,           680HZ-1.3KHZ,   1.3KHZ-2.1KHZ,  2.1KHZ-2.8KHZ,  2.8KHZ-3.5KHZ,
  71          //3.5KHZ-4.1KHZ,        4.1KHZ-5.5KHZ,  5.5KHZ-8.3KHZ,  8.3KHZ-13.7KHZ, 13.7KHZ-22.0KHZ
  72          //每个分段由一个字节决定该频段内的衰减幅度，-9～+3，表示-9dB～+3dB
  73          BYTE CODE gDecdEQ[][EQ_BANDS_NUM] = 
  74          {
  75                  {0,             0,              0,              0,              0,              0,              0,              0,              0,              0       },      //normal
  76                  {2,             -6,             -4,             -3,             -2,             -4,             -6,             -6,              2,              2      },      //ROCK                  
  77                  {-1,     2,             -1,             -3,             -6,             -6,             -6,             -3,             -1,              2      },      //POP                   
  78                  { 2,    -1,             -1,              0,              2,              2,              2,              2,             -3,             -6      },      //classic                       
  79                  {-6,    -1,              2,              0,             -1,              0,              2,              2,              1,             -1      },      //JAZZ                  
  80                  {-2,    -6,             -2,             -2,             -2,             -4,             -6,             -2,              2,             -2      },      //blue          
  81                  { 2,    -1,             -1,             -3,             -6,             -6,             -6,             -6,              2,              2      },      //hall                  
  82                  { 2,     1,              1,             -1,             -2,             -2,             -2,             -3,             -3,             -3      },      //bass          
  83                  {-6,    -6,             -1,              1,              2,              2,              2,              2,              2,             -1      },      //soft          
  84                  {-3,     2,              2,              2,              2,              2,              2,             -3,              2,              2      },      //country                       
  85                  {-1,    -6,             -1,              2,              2,              2,              2,              2,              2,              2      },      //opera
  86          };
  87          
  88          
  89          // Volume table in dB set.
  90          WORD CODE gVolArr[VOLUME_MAX + 1] =
  91          {
  92          #if (VOLUME_MAX == 16)
                 #if defined(AU6210K_NR_D_9X)||defined(AU6210K_NR_D_9X_XJ_HTS)
                      0,
                      26,             36,             49,             67,
                      91,             125,    173,    240,
                      332,    460,    636,    880,    
                      1318,   1433,   1686,   1830    
                 #else
                  0,
                      26,             36,             49,             67,
                      91,             125,    173,    240,
                      332,    460,    636,    880,    
                      1318,   1986,   2366,   2746    //最高音量约680mVrms
                 #endif
              #else
 107                  0,
 108                  26,             31,             36,             42,             49,             58,             67,             78,             
 109                  91,             107,    125,    147,    173,    204,    240,    282,    
 110                  332,    391,    460,    541,    636,    748,    880,    1035,   
 111                  1218,   1433,   1686,   1984,   2334,   2746,   3230,   3800    //最高音量约930mVrms
 112          #endif
 113          };
 114          
 115          
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 3   

 116          #ifdef FUNC_UARTDBG_EN
              VOID PrintPlayInfo(VOID);
              #endif
 119          
 120          #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
              extern BOOL gDevicePlayForcePauseFlag;
              #endif
 123          
 124          
 125          ///////////////////////播放计时相关函数////////////////////////////////////////////////////////
 126          //开始使用定时器计时
 127          VOID SongPlayTimeStart(VOID)
 128          {
 129   1              g_OldPlayTime = -1;
 130   1      }
 131          
 132          //暂停定时器计时
 133          VOID SongPlayTimePause(VOID)
 134          {
 135   1              g_OldPlayTime = -1;
 136   1      }
 137          
 138          //恢复定时器计时
 139          VOID SongPlayTimeResume(VOID)
 140          {
 141   1              g_OldPlayTime = -1;
 142   1      }
 143          
 144          
 145          //更新播放时间
 146          //播放时，由本模块计时，并将是将更新到歌曲信息结构体中
 147          //快进、快退时，由decoder底层计时
 148          VOID SongPlayTimeUpdate(VOID)                   
 149          {
 150   1              static BOOL RTC0p5State = FALSE;
 151   1      
 152   1      //      if(FileEOF(&gPlayCtrl.File))
 153   1      //      {
 154   1      //              return;
 155   1      //      }
 156   1      
 157   1              if((RTC0p5State) && HalfSecStatus())
 158   1              {
 159   2                      RTC0p5State = FALSE;
 160   2              }
 161   1              else if((!RTC0p5State) && !HalfSecStatus())
 162   1              {
 163   2                      RTC0p5State = TRUE;
 164   2                      if(gPlayCtrl.State == PLAY_STATE_PLAY)
 165   2                      {
 166   3                              gSongInfo.CurPlayTime++;
 167   3                      }
 168   2              }
 169   1      
 170   1              if((g_OldPlayTime != gSongInfo.CurPlayTime) && (gSongInfo.CurPlayTime > 0))
 171   1              {
 172   2                      g_OldPlayTime = gSongInfo.CurPlayTime;
 173   2      #ifdef FUNC_UARTDBG_EN
                              PrintPlayInfo();
              #endif
 176   2      
 177   2      #ifdef FUNC_BREAK_POINT_EN
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 4   

 178   2                      BP_SetPlayAttrib();
 179   2      #endif
 180   2              }       
 181   1      }
 182          
 183          
 184          #ifdef FUNC_UARTDBG_EN
              //歌曲播放前，显示歌曲信息
              VOID DisplaySongInfo(VOID)
              {
                      DBG(("FileSize:%lu\n", gPlayCtrl.File.Size));
              #ifdef FUNC_LONG_NAME_EN
                      {
                              BYTE LongFileName[66];   
                              BOOL Ret;
                              WORD* p;
                      
                              Ret = FileGetLongName(&gPlayCtrl.File, LongFileName);
                              DBG(("%d\n", (WORD)Ret));
                              for(p = (WORD*)LongFileName; *p != 0; p++)
                              {
                                      DBG(("%-.2BX %-.2BX ", ((BYTE*)p)[0], ((BYTE*)p)[1]));
                              }
                              DBG(("\n"));
                      }
              #endif
              
              //      DBG(("********SONG INFO*************\n"));
                      //打印歌曲信息
                      switch(gSongInfo.SongType)
                      {
                              case SONG_TYPE_MP3:
                                      DBG(("SongType: MP3\n"));
                                      break;
              
                              case SONG_TYPE_PCM_1CH:
                                      DBG(("SongType: PCM_1CH\n"));
                                      break;
              
                              case SONG_TYPE_PCM_2CH:
                                      DBG(("SongType: PCM_2CH\n"));
                                      break;
              
                              default:
                                      DBG(("SongType: UNKOWN(%bu)\n", gSongInfo.SongType));
                                      break;
                      }
                      
                      DBG(("ChannelNum:       %u\n", (WORD)gSongInfo.ChannelNum));
                      DBG(("SamplesPerSecond: %u\n", (WORD)gSongInfo.SamplesPerSecond));
                      //kbps = (BytesPerSecond*8)/1000 = BytesPerSecond/125
                      DBG(("BytesPerSecond:   %lu (%lukbps)\n", (DWORD)gSongInfo.BytesPerSecond, (DWORD)(gSongInfo.BytesPerSeco
             -nd/125)));
                      DBG(("TotalPlayTime:    %lu\n", (DWORD)gSongInfo.TotalPlayTime));
                      DBG(("CurPlayTime:      %lu\n", (DWORD)gSongInfo.CurPlayTime));
                      DBG(("FrameLen:         %lu\n", (DWORD)gSongInfo.FrameLen));
                      DBG(("FrameNum:         %lu\n", (DWORD)gSongInfo.FrameNum));    
                      DBG(("FileHeaderLen:    %lu\n", (DWORD)gSongInfo.FileHeaderLen));
                      DBG(("IsVBR:            %u\n", (WORD)gSongInfo.IsVBR));
                      DBG(("%s", (gSongInfo.Mp3MpegVersion == 3)?"MPEG_1\n":""));
                      DBG(("%s", (gSongInfo.Mp3MpegVersion == 2)?"MPEG_2\n":""));
                      DBG(("%s", (gSongInfo.Mp3MpegVersion == 0)?"MPEG_2_5\n":""));
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 5   

                      DBG(("%s", (gSongInfo.Mp3Layer == 3)?"LAYER_1\n":""));
                      DBG(("%s", (gSongInfo.Mp3Layer == 2)?"LAYER_2\n":""));
                      DBG(("%s", (gSongInfo.Mp3Layer == 1)?"LAYER_3\n":""));
                      DBG(("****************************\n"));
                      DBG(("\n"));    
              }
              #endif
 246          
 247          
 248          #ifdef FUNC_UARTDBG_EN
              //歌曲播放中，显示播放信息
              VOID PrintPlayInfo(VOID)
              {       
                      BYTE CODE RepeatName[][4] = {"ALL", "ONE", "RAN", "INT"};
                      BYTE CODE EqName[][5] = {"NORM", "ROCK", "POP ", "CLAS", "JAZZ", "BLUE", "HALL", "BASS", "SOFT", "COUN", 
             -"OPER"};
              
                              if(gFsInfo.DevID == DEV_ID_USB)
                              {
                                      DBG(("USB\t")); 
                              }
                              else if(gFsInfo.DevID == DEV_ID_SD)
                              {
                                      DBG(("SD\t"));  
                              }
              
              #ifdef FUNC_FOLDER_EN
                              if(gPlayCtrl.FolderEnable)
                              {
                                      DBG(("(%u/%u, %u/%u, %u)\t", gPlayCtrl.FolderNum, gFsInfo.ValidFolderSum, gPlayCtrl.FileNum, gPlayCtrl.
             -Folder.IncFileCnt, gFsInfo.FileSum));
                                      //DBG(("(*%u/%u, %u/%u, %u)\t", gPlayCtrl.File.FolderNum, gFsInfo.FolderSum, gPlayCtrl.FileNum, gPlayCt
             -rl.Folder.IncFileCnt, gFsInfo.FileSum));
                              }
                              else
                              {
                                      DBG(("(%u/%u, %u/%u)\t", gPlayCtrl.FolderNum, gFsInfo.ValidFolderSum, gPlayCtrl.FileNum, gFsInfo.FileSu
             -m));
                                      //DBG(("(*%u/%u, %u/%u)\t", gPlayCtrl.File.FolderNum, gFsInfo.FolderSum, gPlayCtrl.FileNum, gFsInfo.Fil
             -eSum));
                              }
              #else                              
                      DBG(("(%u/%u)\t", gPlayCtrl.FileNum, gFsInfo.FileSum));
              #endif
                              
                      DBG(("%-.8s.%-.3s ", 
                              &gPlayCtrl.File.ShortName[0],
                              &gPlayCtrl.File.ShortName[8]));
              
                      DBG(("%-.2d:%-.2d ", 
                              (WORD)(gSongInfo.CurPlayTime/60), 
                              (WORD)(gSongInfo.CurPlayTime%60)));
              
                      DBG(("%-.2d ", (WORD)gSys.Volume));
                      DBG(("%s ", RepeatName[gPlayCtrl.RepeatMode]));
                      DBG(("%s ", EqName[gPlayCtrl.Eq]));
              
                      DBG(("\n"));
              }
              #endif
 294          
 295          
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 6   

 296          // Send volume to decoder.
 297          VOID PlayVol2Decd(VOID)         
 298          {
 299   1      #ifdef AU6210K_NR_D_8_CSRBT
                      InDacSetVolume(gVolArr[32], gVolArr[32]);
                      NPCA110X_DAC1_Set_Volume_and_Mute(gSys.Volume);
              #else
 303   1              InDacSetVolume(gVolArr[gSys.Volume], gVolArr[gSys.Volume]);
 304   1      #endif
 305   1      }
 306          
 307          
 308          // Send system EQ to decoder.
 309          VOID PlayEQ2Decd(VOID)  
 310          {
 311   1              DecoderSetEQ(gDecdEQ[gPlayCtrl.Eq]);
 312   1      }
 313          
 314          
 315          // Play song, update song data for playing.
 316          BOOL SongPlayDo(VOID)                                   
 317          {               
 318   1              //每次循环中都检查一次文件是否到结尾
 319   1              //如果到文件结尾则直接返回TRUE
 320   1              //否则执行到FileRead()行会返回FALSE，导致REPEAT ONE模式下也会切到下一首
 321   1              //DBG(("********SongPlayDo*************\n"));
 322   1              if((gPlayCtrl.State != PLAY_STATE_PLAY) || FileEOF(&gPlayCtrl.File))
 323   1              {
 324   2                      //DBG(("gPlayCtrl.State:%bx\n",gPlayCtrl.State));
 325   2                      return TRUE;
 326   2              }
 327   1              if(!IsDecoderDone())
 328   1              {
 329   2                      //decoder监视定时器检查
 330   2                      if(IsTimeOut(&gPlayWatchTimer))
 331   2                      {
 332   3                              DBG(("Play Watcher Over!\n"));
 333   3                              return FALSE;
 334   3                      }
 335   2                      return TRUE;
 336   2              }
 337   1              TimeOutSet(&gPlayWatchTimer, PLAY_WATCH_TIME);
 338   1              if(gSongInfo.SongType == SONG_TYPE_MP3)
 339   1              {
 340   2                      //DBG(("gSongInfo.PlayBuffer:%x\n",gSongInfo.PlayBuffer));
 341   2                      if(!FileRead(&gPlayCtrl.File, gSongInfo.PlayBuffer, gFileRdSize))
 342   2                      {
 343   3                              gPlayCtrl.State = PLAY_STATE_IDLE;
 344   3                              if(gFsError != FS_ERROR_INVALID_ADDRESS)
 345   3                              {
 346   4                                      DBG(("FileRead() FALSE 021!\n"));
 347   4                                      gFsError = FS_ERROR_READ_FAILED;
 348   4                              }
 349   3                              DBG(("FileRead() FALSE 002!\n"));
 350   3                              return FALSE;
 351   3                      }
 352   2                      //DBG(("FR(%x, %x)\n", gSongInfo.PlayBuffer, gFileRdSize));
 353   2                      SetDecoderData(gSongInfo.PlayBuffer, gFileRdSize);
 354   2              }       
 355   1      
 356   1              return TRUE;                    
 357   1      }
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 7   

 358          
 359          
 360          // Stop decoding and go to stop state.
 361          VOID SongPlayStop(VOID)                                         
 362          {
 363   1              DBG(("SongPlayStop()\n"));
 364   1              FileRewind(&gPlayCtrl.File);
 365   1              gSongInfo.CurPlayTime = 0;
 366   1              gPlayCtrl.State = PLAY_STATE_STOP;
 367   1      
 368   1              //关闭DAC
 369   1              MuteOn(FALSE, FALSE);   
 370   1              WaitMs(100);    //消除歌曲切换时的POP声
 371   1      }
 372          
 373          
 374          extern VOID SetFstFrmAddr(WORD Addr);
 375          //指定播放时间，初始化decoder，给decoder数据，启动decoder解码
 376          //快进，快退恢复播放
 377          //进入播放状态
 378          BOOL SongPlayStart(VOID)
 379          {
 380   1              //必须RstDecd否则WMA播放可能出问题。
 381   1              RstDecd();      
 382   1              SetDecoderMode(gSongInfo.SongType);
 383   1              
 384   1              InDacSetSampleRate(gSongInfo.SamplesPerSecond);
 385   1              PlayEQ2Decd();  
 386   1              //VolumeVal = 0;
 387   1              IsVolumeUpEnd = FALSE;
 388   1      
 389   1      //      if(!gSys.MuteFg)
 390   1      //      {
 391   1      //              DBG(("SongPlayStart,UnMute\n"));        
 392   1      //              UnMute();
 393   1      //      }       
 394   1      
 395   1              //DBG(("Resume to BP!\n"));
 396   1              DecoderStartPlay();     
 397   1      #ifdef FUNC_OTP_PLAY_EN 
                      if(gSys.SystemMode != SYS_MODE_OTPDEV)
              #endif
 400   1              {
 401   2                      DecoderSeekToTime(gSongInfo.CurPlayTime);  //指定播放时间
 402   2              }
 403   1      
 404   1              //DBG(("gSongInfo.PlayBuffer:%x, gFileRdSize:%x\n",gSongInfo.PlayBuffer, gFileRdSize));
 405   1              if(!FileRead(&gPlayCtrl.File, gSongInfo.PlayBuffer, gFileRdSize))
 406   1              {
 407   2                      DBG(("FileRead() FALSE 001!\n"));
 408   2                      if(gFsError != FS_ERROR_INVALID_ADDRESS)
 409   2                      {
 410   3                              gFsError = FS_ERROR_READ_FAILED;
 411   3                      }
 412   2                      return FALSE;
 413   2              }       
 414   1      
 415   1              SetFstFrmAddr(gSongInfo.DataOffset);
 416   1              SetDecoderData((gSongInfo.PlayBuffer + gSongInfo.DataOffset), (gFileRdSize - gSongInfo.DataOffset));
 417   1              DBG(("SongPlayStart(),gSongInfo.DataOffset:%x\n", gSongInfo.DataOffset));
 418   1              SongPlayTimeStart();
 419   1              TimeOutSet(&gPlayWatchTimer, PLAY_WATCH_TIME);          
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 8   

 420   1              //如果是快进、快退、断点播放，不是从歌曲开头播放，则延时一段时间再打开DAC的音量，消除pop或变调声。
 421   1              TimeOutSet(&VolumeUpTimer, (gSongInfo.CurPlayTime > 0) ? 200 : 0);      
 422   1              gPlayCtrl.State = PLAY_STATE_PLAY;
 423   1              
 424   1      #ifdef FUNC_DISP_EN
 425   1      #ifndef FUNC_SINGLE_LED_EN      //单个LED取消是因为换曲LED显示不正常
                      DispMute(); //解决切换歌曲后Mute显示状态出错问题。
              #endif
 428   1      #endif
 429   1      
 430   1              return TRUE;
 431   1      }
 432          
 433          
 434          //开始一首歌曲的播放: 打开文件，分析文件，初始化decoder
 435          BOOL SongPlayInit(VOID)
 436          {
 437   1              FOLDER* Folder = NULL;
 438   1              
 439   1      #ifdef FUNC_OPEN_FILE_DELAY_EN
                      s_IsOpenFileDelay = FALSE;
              #endif
 442   1                                              
 443   1      #ifdef FUNC_FOLDER_EN
                      if(gPlayCtrl.FolderEnable)
                      {
                              Folder = &gPlayCtrl.Folder;
                      }
              #endif
 449   1      
 450   1      #ifdef FUNC_FOLDER_EN
                      if(gPlayCtrl.FolderEnable)
                      {
                              if(gPlayCtrl.FileNum > gPlayCtrl.Folder.IncFileCnt)
                              {
                                      gPlayCtrl.FileNum = 1;
                              }
                      }
              #endif
 459   1              if((!gPlayCtrl.FolderEnable) && (gPlayCtrl.FileNum > gFsInfo.FileSum))
 460   1              {
 461   2                      gPlayCtrl.FileNum = 1;
 462   2              }
 463   1      
 464   1              //打开文件
 465   1              DBG(("打开文件,gPlayCtrl.FileNum:%u,gPlayCtrl.FolderNum:%u\n", gPlayCtrl.FileNum, (DWORD)Folder, gPlayCtr
             -l.FolderNum));
 466   1              DBG(("FileOpenByNum(%lx, %lx, %x)\n", (DWORD)(&gPlayCtrl.File), (DWORD)Folder, gPlayCtrl.FileNum));
 467   1                      
 468   1              if(!FileOpenByNum(&gPlayCtrl.File, Folder, gPlayCtrl.FileNum))
 469   1              {
 470   2                      DBG(("FileOpenByNum() error!\n"));
 471   2                      gFsError = FS_ERROR_FILEOPEN_FAILED;
 472   2                      return FALSE;
 473   2              }
 474   1      #ifdef FUNC_BREAK_POINT_EN
 475   1      //      DBG(("播放歌曲：%-.8s%-.3s\n", &gPlayCtrl.File.ShortName[0], &gPlayCtrl.File.ShortName[8]));
 476   1              gFileNameCrc8 = CRC8Cal(&gPlayCtrl.File.ShortName, 11); 
 477   1      #ifdef FUNC_OTP_PLAY_EN
                      if(gSys.SystemMode != SYS_MODE_OTPDEV)  //开机音乐播放不需要记忆断点信息
              #endif
 480   1              {
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 9   

 481   2                      BP_SaveInfo((BYTE*)(&gBreakPointInfo.PowerMemory), sizeof(gBreakPointInfo.PowerMemory));
 482   2              }
 483   1      //      DBG(("SongPlayInit,BP_SaveInfo(),gFileNameCrc8:%bu\n", gFileNameCrc8));
 484   1      #endif
 485   1      
 486   1      #ifdef FUNC_FOLDER_EN
                      if((gPlayCtrl.Folder.FolderNum != gPlayCtrl.File.FolderNum)
                      #ifdef FUNC_OTP_PLAY_EN
                              && (gSys.SystemMode != SYS_MODE_OTPDEV)
                      #endif
                      )
                      {
                              // 更新gPlayCtrl.Folder数据
                              gPlayCtrl.FolderNum = GetValidFolderNum(gPlayCtrl.File.FolderNum);
                              if(!FolderOpenByValidNum(&gPlayCtrl.Folder, NULL, gPlayCtrl.FolderNum))
                              {
                                      DBG(("*FoldOpenyByNum(%d) Failed!\n", gPlayCtrl.File.FolderNum));
                                      gFsError = FS_ERROR_FOLDOPEN_FAILED;
                                      return FALSE;
                              }
                      }
              #endif
 503   1      
 504   1              DBG(("\n"));
 505   1              DBG(("-----------------------------------\n"));
 506   1              DBG(("DEV: %bd\n", gFsInfo.DevID));
 507   1              DBG(("FileNumInDisk: %u\n", gPlayCtrl.File.FileNumInDisk));
 508   1              DBG(("FileNumInFolder: %u\n", gPlayCtrl.File.FileNumInFolder));
 509   1              DBG(("FolderNum: %u\n", gPlayCtrl.File.FolderNum));
 510   1              DBG(("DirSecNum: %lu\n", gPlayCtrl.File.DirSecNum));
 511   1              DBG(("DirOffset: %u\n", (WORD)gPlayCtrl.File.DirOffset));
 512   1              DBG(("FileName: %-.11s\n", gPlayCtrl.File.ShortName));
 513   1              DBG(("FileType: %-.2bd\n", gPlayCtrl.File.FileType));
 514   1              DBG(("StartSec: %lu\n", gPlayCtrl.File.StartSec));
 515   1              DBG(("SecNum: %lu\n", gPlayCtrl.File.SecNum));
 516   1              DBG(("OpSec: %lu\n", gPlayCtrl.File.OpSec));
 517   1              DBG(("OpSecCnt: %lu\n", gPlayCtrl.File.OpSecCnt));
 518   1              DBG(("Size: %lu\n", gPlayCtrl.File.Size));
 519   1              DBG(("-----------------------------------\n\n"));       
 520   1      
 521   1              //解析文件
 522   1              if(!DecoderAnalysis(&gPlayCtrl.File))
 523   1              {
 524   2                      DBG(("\nDecoderAnalysis Error!\n\n"));
 525   2                      gFsError = FS_ERROR_ANALYSIS_FAILED;
 526   2                      return FALSE;
 527   2              }
 528   1      #ifdef FUNC_UARTDBG_EN
                      DisplaySongInfo();
              #endif  
 531   1      
 532   1              gSongInfo.CurPlayTime = 0;
 533   1      
 534   1      #ifdef FUNC_BREAK_POINT_EN
 535   1              //DBG(("!!!s_BreakPointFlag:%bu\n", s_BreakPointFlag));
 536   1              if(s_BreakPointFlag)
 537   1              {
 538   2                      s_BreakPointFlag = FALSE;
 539   2                      BP_GetPlayAttrib();
 540   2                      if(gSongInfo.CurPlayTime >= gSongInfo.TotalPlayTime)
 541   2                      {
 542   3                              gSongInfo.CurPlayTime = 0;
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 10  

 543   3                      }
 544   2                      //DBG(("gSongInfo.CurPlayTime:%lu\n", gSongInfo.CurPlayTime));  
 545   2              }
 546   1      #endif
 547   1      
 548   1      //      IsFastPlayResume = FALSE;
 549   1              
 550   1              //初始化decoder，并进入播放状态
 551   1      //      IsFirstSetFrame = TRUE;
 552   1              if(!SongPlayStart())
 553   1              {
 554   2                      DBG(("\nSongPlayStart Error!\n"));
 555   2                      return FALSE;
 556   2              }
 557   1              return TRUE;
 558   1      }
 559          
 560          
 561          static VOID GetNextSongNum(BYTE Direction)
 562          {
 563   1              WORD    SongSum;
 564   1              WORD    Temp;
 565   1              BYTE    StepCnt;
 566   1      
 567   1              //DBG((">>>GetNextSongNum(%bd)\n", Direction));
 568   1      #ifdef  FUNC_FOLDER_EN  
                      if(gPlayCtrl.FolderEnable)
                      {
                              //如果文件夹号有变化，则重新打开
                              if(gPlayCtrl.FolderNum != gPlayCtrl.Folder.ValidFolderNum)
                              {
                                      if(!FolderOpenByValidNum(&gPlayCtrl.Folder, NULL, gPlayCtrl.FolderNum))
                                      {
                                              DBG(("FolderOpenByValidNum() error!\n"));
                                              return;
                                      }
                              }               
                              SongSum = gPlayCtrl.Folder.IncFileCnt;
                      }
                      else
                      {
                              SongSum = gFsInfo.FileSum;
                      }
              #else
 587   1              SongSum = gFsInfo.FileSum;
 588   1      #endif
 589   1      
 590   1              //DBG(("SongSum: %u(InFold:%u,InDisk:%u)\n", SongSum, gPlayCtrl.Folder.IncFileCnt, gFsInfo.FileSum));
 591   1      
 592   1              if(SongSum == 0)
 593   1              {
 594   2                      return;
 595   2              }
 596   1      
 597   1              switch (gPlayCtrl.RepeatMode)
 598   1              {       
 599   2                      case REPEAT_ONE:
 600   2                      case REPEAT_ALL:                
 601   2                      case REPEAT_INTRO:  
 602   2                      case REPEAT_FOLDER:
 603   2                              if(Direction == PLAY_DIRECT_NEXT_10)
 604   2                              {
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 11  

 605   3                                      StepCnt = 10;
 606   3                                      Direction = PLAY_DIRECT_NEXT;
 607   3                              }
 608   2                              else if(Direction == PLAY_DIRECT_PRE_10)
 609   2                              {                               
 610   3                                      StepCnt = 10;
 611   3                                      Direction = PLAY_DIRECT_PRE;
 612   3                              }
 613   2                              else
 614   2                              {
 615   3                                      StepCnt = 1;
 616   3                              } 
 617   2      
 618   2                              if(Direction == PLAY_DIRECT_NEXT)
 619   2                              {
 620   3                                      if((gPlayCtrl.FileNum + StepCnt) > SongSum)
 621   3                                      {
 622   4                                              gPlayCtrl.FileNum = 1;
 623   4                                      }
 624   3                                      else
 625   3                                      {
 626   4                                              gPlayCtrl.FileNum += StepCnt;
 627   4                                      }
 628   3                              }
 629   2                              else if(Direction == PLAY_DIRECT_PRE)
 630   2                              {
 631   3                                      if(gPlayCtrl.FileNum <= StepCnt)
 632   3                                      {
 633   4                                              gPlayCtrl.FileNum = SongSum;
 634   4                                      }
 635   3                                      else
 636   3                                      {
 637   4                                              gPlayCtrl.FileNum -= StepCnt;
 638   4                                      }
 639   3                              }
 640   2                              break;
 641   2      
 642   2                      case REPEAT_RANDOM:
 643   2                              Temp = (gSysTick%SongSum) + 1;
 644   2                              if(Temp == gPlayCtrl.FileNum)
 645   2                              {
 646   3                                      Temp++;
 647   3                              }
 648   2      
 649   2                              if(Temp > SongSum)
 650   2                              {
 651   3                                      Temp = 1;       
 652   3                              }
 653   2      
 654   2                              gPlayCtrl.FileNum = Temp;
 655   2                              break;
 656   2      
 657   2                      default:
 658   2                              break;
 659   2              }
 660   1              
 661   1              gPlayCtrl.Direction = Direction;
 662   1              //DBG(("<<<GetNextSongNum(%bd)\n", Direction));
 663   1      #ifdef FUNC_DISP_EN
 664   1              DispFileNum();
 665   1      #endif
 666   1              return;
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 12  

 667   1      }
 668          
 669          
 670          // Play state process.
 671          VOID PlayStatePlayOp(VOID)                                      
 672          {       
 673   1              //歌曲播放结束，或者浏览播放10秒，切换歌曲
 674   1              //如果当前是播放到文件末尾，则需要等待PCM FIFO中的数据播放完毕。
 675   1              if((FileEOF(&gPlayCtrl.File) && IsFifoEmpty())
 676   1              ||((gPlayCtrl.RepeatMode == REPEAT_INTRO) && (gSongInfo.CurPlayTime > 10)))
 677   1              {
 678   2                      DBG(("Song play end!\n"));      
 679   2                      //等待PCM数据全部被取走
 680   2                      SongPlayStop(); 
 681   2                      if(gPlayCtrl.RepeatMode != REPEAT_ONE)
 682   2                      {          
 683   3                              GetNextSongNum(PLAY_DIRECT_NEXT);
 684   3                      }
 685   2                      if(!SongPlayInit())
 686   2                      {
 687   3                              DBG(("PlayStatePlayOp,!SongPlayInit()\n"));
 688   3                              MessageSend(MSG_FIFO_KEY, MSG_NEXT);    
 689   3                              gPlayCtrl.State = PLAY_STATE_STOP;
 690   3                              return;
 691   3                      }
 692   2              }
 693   1      
 694   1              if(IsTimeOut(&VolumeUpTimer) && (!gSys.MuteFg) && (!IsVolumeUpEnd))
 695   1              {
 696   2                      DBG(("SongPlayStart,UnMute\n"));        
 697   2                      UnMute();                               
 698   2                      PlayVol2Decd();
 699   2                      IsVolumeUpEnd = TRUE;
 700   2                      //DBG(("VolumeUp %bd/%bd\n", VolumeVal, gSys.Volume));
 701   2              }               
 702   1      
 703   1              //DBG(("SongPlayDo()\n"));
 704   1              
 705   1      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                      if(gDevicePlayForcePauseFlag == TRUE)
                      {
                              gPlayCtrl.State = PLAY_STATE_PAUSE;
                              gPlayCtrl.Event = MSG_PLAY_PAUSE;
                      }
              #endif
 712   1              if(!SongPlayDo())
 713   1              {
 714   2                      SongPlayStop();
 715   2                      DBG(("PlayStatePlayOp,!SongPlayDo()\n"));
 716   2                      if((gPlayCtrl.Direction == PLAY_DIRECT_NEXT_10) || (gPlayCtrl.Direction == PLAY_DIRECT_NEXT))
 717   2                      {
 718   3                              MessageSend(MSG_FIFO_KEY, MSG_NEXT);
 719   3                      }
 720   2                      else
 721   2                      {
 722   3                              MessageSend(MSG_FIFO_KEY, MSG_PRE);
 723   3                      }       
 724   2                      gPlayCtrl.State = PLAY_STATE_STOP;      
 725   2                      return;
 726   2              }
 727   1      
 728   1              switch(gPlayCtrl.Event)
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 13  

 729   1              {
 730   2                      case MSG_PLAY_PAUSE:
 731   2                      case MSG_PLAY_1:
 732   2                              DBG(("PAUSE\n"));
 733   2      #ifdef FUNC_BEEP_SOUND_EN       
                                      PushKeyBeep(1);
              #endif
 736   2                              DecoderPause();
 737   2                              SongPlayTimePause();
 738   2                              gPlayCtrl.State = PLAY_STATE_PAUSE;                     
 739   2      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                      SPI_PlaySelectNum(SPIPLAY_SONG_PAUSE, 0);
              #endif
 742   2      #ifdef FUNC_OTP_KEY_SOUND_EN
                                      OTP_PlaySelNum(OTPPLAY_NUM_PAUSE, 0);
              #endif
 745   2                              MuteOn(FALSE, TRUE);                    
 746   2      #ifdef FUNC_DISP_EN
 747   2                              DispPlayState();
 748   2      #endif
 749   2                              break;
 750   2      
 751   2                      case MSG_PP_STOP:
 752   2                      case MSG_STOP:
 753   2                              DBG(("STOP\n"));
 754   2                              SongPlayStop();
 755   2                              gSys.MuteFg = FALSE;
 756   2      #ifdef FUNC_DISP_EN
 757   2                              DispPlayState();
 758   2      #endif          
 759   2      #if (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM)                  
              #ifdef FUNC_BREAK_POINT_EN
                                      BP_SetPlayAttrib(); //清除记忆播放时间
              #endif
              #endif
 764   2                              break;
 765   2      
 766   2      #ifdef FUNC_FAST_PLAY_EN
                              case MSG_FF_START:
              #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                      if(gDevicePlayForcePauseFlag == TRUE) 
                                      {
                                              break;
                                      }                                       
              #endif
                                      DBG(("FF_START\n"));
                                      MuteOn(FALSE, TRUE);
                                      DecoderFastPlaySet(FAST_FORWARD, 32);
                                      gPlayCtrl.State = PLAY_STATE_FF;
              #ifdef FUNC_DISP_EN
                                      DispPlayState();
              #endif
                                      break;
              
                              case MSG_FB_START:
              #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                      if(gDevicePlayForcePauseFlag == TRUE) 
                                      {
                                              break;
                                      }                                       
              #endif
                                      DBG(("FB_START\n"));
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 14  

                                      MuteOn(FALSE, TRUE);
                                      DecoderFastPlaySet(FAST_BACKWARD, 32);
                                      gPlayCtrl.State = PLAY_STATE_FB;
              #ifdef FUNC_DISP_EN
                                      DispPlayState();
              #endif
                                      break;
              #endif
 799   2      
 800   2                      default:
 801   2                              break;
 802   2              }
 803   1      }
 804          
 805          
 806          // Play pause state process.
 807          VOID PlayStatePauseOp(VOID)                                     
 808          {       
 809   1              switch (gPlayCtrl.Event)
 810   1              {                                       
 811   2                      case MSG_PLAY_PAUSE:
 812   2                      case MSG_PLAY_1:
 813   2                              DBG(("RESUME\n"));
 814   2      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                      gDevicePlayForcePauseFlag = FALSE;
              #endif          
 817   2                              SetVolumeWithMute();
 818   2                              DecoderStartPlay();
 819   2                              SongPlayTimeResume();
 820   2                              TimeOutSet(&gPlayWatchTimer, PLAY_WATCH_TIME);
 821   2                              gPlayCtrl.State = PLAY_STATE_PLAY;                      
 822   2      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                      SPI_PlaySelectNum(SPIPLAY_SONG_PLAY, 1);
              #endif
 825   2      #ifdef FUNC_OTP_KEY_SOUND_EN
                                      OTP_PlaySelNum(OTPPLAY_NUM_PLAY, 1);
              #endif
 828   2      
 829   2      #ifdef FUNC_DISP_EN
 830   2                              DispPlayState();
 831   2      #endif
 832   2                              break;  
 833   2              
 834   2                      case MSG_PP_STOP:
 835   2                      case MSG_STOP:
 836   2                              DBG(("STOP\n"));
 837   2                              SongPlayStop();
 838   2                              gSys.MuteFg = FALSE;
 839   2      #ifdef FUNC_DISP_EN
 840   2                              DispPlayState();
 841   2      #endif
 842   2      #if (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM)                  
              #ifdef FUNC_BREAK_POINT_EN
                                      BP_SetPlayAttrib(); //清除记忆播放时间
              #endif
              #endif
 847   2                              break;
 848   2              
 849   2                      default:
 850   2                              break;                  
 851   2              }       
 852   1      }
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 15  

 853          
 854          
 855          // Play stop state process.
 856          VOID PlayStateStopOp(VOID)                              
 857          {
 858   1              switch (gPlayCtrl.Event)
 859   1              {
 860   2                      case MSG_NEXT:
 861   2                      case MSG_PRE:
 862   2                      case MSG_PREV1:
 863   2                      case MSG_NEXT1:
 864   2                              break;
 865   2                                              
 866   2                      case MSG_PLAY_PAUSE:
 867   2                      case MSG_PLAY_1:
 868   2                              DBG(("PLAY\n"));        
 869   2      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                      gDevicePlayForcePauseFlag = FALSE;
              #endif                  
 872   2      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                      SPI_PlaySelectNum(SPIPLAY_SONG_PLAY, 0);
              #endif
 875   2                              if(!SongPlayInit())
 876   2                              {
 877   3                                      DBG(("PlayStateStopOp,!SongPlayInit()\n"));
 878   3                                      gPlayCtrl.State = PLAY_STATE_STOP;
 879   3                              }
 880   2                              SetVolumeWithMute();
 881   2                              break;          
 882   2                              
 883   2                      default:
 884   2                              break;                  
 885   2              }
 886   1      }
 887          
 888          
 889          #ifdef FUNC_FAST_PLAY_EN
              // Play State fast forward control.
              VOID PlayStateFF_FBOp(VOID)
              {
              //      DBG((">>PlayStateFF_FBOp()\n"));
                      DecoderFastPlayProc();
              //      if(DecoderFastPlayProc() == FALSE)
              //      {//快进到文件尾或快退到文件头,如果需要自动切换曲目
              //              gPlayCtrl.Event = MSG_FF_FB_END;
              //      }
                      
                      switch(gPlayCtrl.Event)
                      {
                              case MSG_FF_FB_END:
              //                      DBG(("MSG_FF_FB_END\n"));
                                      if(!SongPlayStart())
                                      {
                                              MessageSend(MSG_FIFO_KEY, MSG_NEXT);    
                                              gPlayCtrl.State = PLAY_STATE_STOP;
                                      }
              #ifdef FUNC_DISP_EN
                                      DispPlayState();
              #endif                  
                                      break;
              
                              default:
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 16  

                                      break;
                      }
              //      DBG(("<<PlayStateFF_FBOp()\n"));
              }
              #endif
 920          
 921          
 922          // Play state control.
 923          VOID PlayStateCtrl(VOID)                                                                        
 924          {
 925   1      //      DBG((">>>PlayStateCtrl()\n"));  
 926   1              BYTE minvolflag = 0;
 927   1              BYTE maxvolflag = 0;
 928   1      
 929   1              gPlayCtrl.Event = MessageGet(MSG_FIFO_KEY);
 930   1      
 931   1      #ifdef FUNC_OPEN_FILE_DELAY_EN
                      if(s_IsOpenFileDelay)
                      {       
                              if((gPlayCtrl.Event == MSG_NONE) && IsTimeOut(&s_OpenFileDelayTimer))
                              {
                                      if(!SongPlayInit())
                                      {
                                              MessageSend(MSG_FIFO_KEY, (gPlayCtrl.Direction == PLAY_DIRECT_PRE) ? MSG_PRE : MSG_NEXT);
                                              gPlayCtrl.State = PLAY_STATE_STOP; 
                                      }
                                      s_IsOpenFileDelay = FALSE;
                              }
                      }
              #endif
 945   1      
 946   1              if(gPlayCtrl.State != PLAY_STATE_BROWSE)
 947   1              {
 948   2                      //处理各种状态下的通用事件
 949   2                      switch (gPlayCtrl.Event)
 950   2                      {                                                       
 951   3                              case MSG_VOL_ADD:       
 952   3      
 953   3                                      VolumeAdjust(UP);
 954   3      #ifdef AU6210K_MINI503 
 955   3                                      if (gSys.Volume >= VOLUME_MAX)
 956   3                                      {
 957   4                                              SPI_PlaySelectNum(SPIPLAY_SONG_MAX_VOLUME, 1);
 958   4                                      }
 959   3      #endif
 960   3                                      break;
 961   3                                      
 962   3                              case MSG_VOL_SUB:       
 963   3                                      VolumeAdjust(DOWN);
 964   3      #ifdef AU6210K_MINI503
 965   3                                      if (gSys.Volume <= VOLUME_MIN)
 966   3                                      {
 967   4                                                      SPI_PlaySelectNum(SPIPLAY_SONG_MIN_VOLUME, 1);
 968   4                                      }
 969   3      #endif
 970   3                                      break;
 971   3      #ifdef FUNC_PT231X_EN
                              case MSG_TREBUP:
                                      case MSG_TREBDN:
                                      case MSG_BASSUP:
                                      case MSG_BASSDN:
                                      case MSG_DEFAULT:
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 17  

                                              PT2315E_Do(gPlayCtrl.Event);                    
                                              break;  
              
              #elif 0// defined(FUNC_NPCA110X_EN)
                              case MSG_DEFAULT:
                                      if(isDefaultBass)
                                      {
                                              NPCA110X_SetBass();
                                              isDefaultBass = FALSE;
                                      }
                                      else
                                      {
                                              NPCA110X_NormalBass();
                                              isDefaultBass = TRUE;
                                      }
                                      break;
              #endif
 994   3      
 995   3                              case MSG_INTRO:
 996   3                                      if(gPlayCtrl.RepeatMode == REPEAT_INTRO)
 997   3                                      {
 998   4                                              gPlayCtrl.RepeatMode = REPEAT_ALL;
 999   4                                      }
1000   3                                      else
1001   3                                      {
1002   4                                              gPlayCtrl.RepeatMode = REPEAT_INTRO;
1003   4                                      }
1004   3      #ifdef FUNC_DISP_EN
1005   3                                      DispRepeat(TRUE);
1006   3      #endif                          
1007   3                                      break;
1008   3      
1009   3                              case MSG_REPEAT:                                
1010   3                                      DBG(("REPEAT\n"));
1011   3                                      /*gPlayCtrl.RepeatMode++;
1012   3                                      if(gPlayCtrl.RepeatMode >= REPEAT_MODE_SUM)
1013   3                                      {
1014   3                                              gPlayCtrl.RepeatMode = REPEAT_ALL;
1015   3                                      }
1016   3                                      if(gPlayCtrl.RepeatMode == REPEAT_FOLDER)
1017   3                                      {
1018   3                                              gPlayCtrl.FolderEnable = TRUE;
1019   3                                              gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInFolder;
1020   3                                      }
1021   3                                      else
1022   3                                      {
1023   3                                              gPlayCtrl.FolderEnable = FALSE;
1024   3                                              gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInDisk;
1025   3                                      }*/
1026   3                      if(gPlayCtrl.RepeatMode == REPEAT_ALL)
1027   3                                      {
1028   4                                              gPlayCtrl.RepeatMode = REPEAT_ONE;
1029   4                                      }
1030   3                                      else
1031   3                                      {   
1032   4                                          gPlayCtrl.RepeatMode = REPEAT_ALL;
1033   4                                      }
1034   3      
1035   3                                      
1036   3                                      if(gPlayCtrl.RepeatMode == REPEAT_FOLDER)
1037   3                                      {
1038   4                                              gPlayCtrl.FolderEnable = TRUE;
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 18  

1039   4                                              gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInFolder;
1040   4                                      }
1041   3                                      else
1042   3                                      {
1043   4                                              gPlayCtrl.FolderEnable = FALSE;
1044   4                                              gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInDisk;
1045   4                                      }
1046   3      #ifdef FUNC_BREAK_POINT_EN
1047   3                                      BP_SetPlayAttrib();
1048   3      #endif
1049   3      
1050   3      #ifdef FUNC_DISP_EN
1051   3                                      DispRepeat(TRUE);
1052   3      #endif
1053   3                                      break;
1054   3      
1055   3                              //case MSG_EQ_SW:
1056   3                              case MSG_EQ_CH_SUB:
1057   3                                      DBG(("EQ\n"));  
1058   3                                      gPlayCtrl.Eq++;
1059   3                                      if(gPlayCtrl.Eq >= DECD_EQ_SUM)
1060   3                                      {
1061   4                                              gPlayCtrl.Eq = DECD_EQ_NORMAL;  
1062   4                                      }
1063   3                                      PlayEQ2Decd();                  
1064   3      
1065   3      #ifdef FUNC_BREAK_POINT_EN
1066   3                                      BP_SetPlayAttrib();
1067   3      #endif
1068   3      
1069   3      #ifdef FUNC_DISP_EN
1070   3                                      DispEQ(TRUE);
1071   3      #endif
1072   3                                      break;
1073   3                                      
1074   3                              case MSG_MUTE:                          
1075   3      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                              if(gSys.MuteFg)
                                              {
                                                      if(gPlayCtrl.State == PLAY_STATE_PLAY)
                                                      {
                                                              SPI_PlaySelectNum(SPIPLAY_SONG_UNMUTE, 1);
                                                      }
                                                      else
                                                      {
                                                              SPI_PlaySelectNum(SPIPLAY_SONG_UNMUTE, 0);
                                                      }
                                              }
                                              else
                                              {       
                                                      SPI_PlaySelectNum(SPIPLAY_SONG_MUTE, 0);
                                              }
              #endif
1092   3                                      MuteStatusChange();     
1093   3                                      break;
1094   3              
1095   3                              case MSG_NEXT:
1096   3                              case MSG_NEXT1:
1097   3      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                              if(gDevicePlayForcePauseFlag == TRUE) 
                                              {
                                                      break;
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 19  

                                              }                                       
              #endif
1103   3                                      DBG1(("NEXT\n"));
1104   3      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                              SPI_PlaySelectNum(SPIPLAY_SONG_NEXT, 0);
              #endif
1107   3      
1108   3      #ifdef FUNC_DISP_EN
1109   3                                      DispDev();
1110   3      #endif
1111   3      #ifndef FUNC_FOLDER_EN
1112   3                                      if(gFsInfo.FileSum > 1)
1113   3      #else
                                              if(((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.Folder.IncFileCnt > 1))
                                              || ((gPlayCtrl.FolderEnable == FALSE) && (gFsInfo.FileSum > 1)))
              #endif
1117   3                                      {
1118   4                                              SongPlayStop();
1119   4                                              GetNextSongNum(PLAY_DIRECT_NEXT);
1120   4                                              
1121   4      #ifdef FUNC_BEEP_SOUND_EN       
                                                      PushKeyBeep(1);
              #endif
1124   4                                              gSys.MuteFg = FALSE;
1125   4      
1126   4      #ifdef FUNC_OPEN_FILE_DELAY_EN
                                                      TimeOutSet(&s_OpenFileDelayTimer, OPEN_FILE_DELAY_TIME);
                                                      s_IsOpenFileDelay = TRUE;
              #else
1130   4      
1131   4                                              if(!SongPlayInit())
1132   4                                              {
1133   5                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT);
1134   5                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
1135   5                                              }               
1136   4      #endif
1137   4                                      }
1138   3                                      else
1139   3                                      {               
1140   4      #ifdef FUNC_OTP_PLAY_EN
                                                      if(gSys.SystemMode == SYS_MODE_OTPDEV)
                                                      {
                                                              SongPlayStop();
                                                              GetNextSongNum(PLAY_DIRECT_NEXT);
                                                              gSys.MuteFg = FALSE;
                                                              if(!SongPlayInit())
                                                              {
                                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT);
                                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
                                                              }
                                                              break;
                                                      }
              #endif
1154   4                                              DBG(("ONE S1\n"));
1155   4                                              DBG(("gPlayCtrl.FolderEnable:0x%bx, gFsInfo.ValidFolderSum:0x%x,gFsInfo.FileSum:0x%x\n", gPlayCtrl.Fo
             -lderEnable, gFsInfo.ValidFolderSum, gFsInfo.FileSum));
1156   4                                              DBG(("gPlayCtrl.File.FolderNum:0x%x,gPlayCtrl.Folder.IncFileCnt:0x%x\n", gPlayCtrl.File.FolderNum, gP
             -layCtrl.Folder.IncFileCnt));
1157   4                                              //To do...
1158   4      #ifdef FUNC_FOLDER_EN
                                                      if(gPlayCtrl.FolderEnable == TRUE)
                                                      {
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 20  

                                                              DBG(("**gFsInfo.ValidFolderSum:%u,FolderSum:%u\n", gFsInfo.ValidFolderSum, gFsInfo.FolderSum));
                                                              if(gFsInfo.FolderSum > 1)
                                                              {
                                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT_FOLDER);
                                                                      DBG(("*NxtFold\n"));
                                                              }
              #ifdef FUNC_UARTDBG_EN
                                                              else
                                                              {
                                                                      DBG(("*FoldSum = 1\n"));
                                                              }
              #endif  
                                                      }
              #else
1175   4                                              //MessageSend(MSG_FIFO_KEY, MSG_STOP);
1176   4      #endif
1177   4                                      }
1178   3                                      break;
1179   3              
1180   3                              case MSG_PRE:
1181   3                              case MSG_PREV1:
1182   3      #ifdef  FUNC_DEVICE_FORCEPAUSE_EN
                                              if(gDevicePlayForcePauseFlag == TRUE) 
                                              {
                                                      break;
                                              }                                       
              #endif
1188   3                                      DBG1(("PRE\n"));
1189   3      #if 0//def FUNC_SPI_KEY_SOUND_EN
                                              SPI_PlaySelectNum(SPIPLAY_SONG_PREV, 0);
              #endif
1192   3      
1193   3      #ifdef FUNC_DISP_EN
1194   3                                      DispDev();
1195   3      #endif
1196   3      #ifndef FUNC_FOLDER_EN
1197   3                                      if(gFsInfo.FileSum > 1)
1198   3      #else
                                              if(((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.Folder.IncFileCnt > 1) && (gPlayCtrl.File.FolderNum
             -))
                                              || ((gPlayCtrl.FolderEnable == FALSE) && (gFsInfo.FileSum > 1)))
              #endif
1202   3                                      {                                       
1203   4                                              SongPlayStop();
1204   4                                              GetNextSongNum(PLAY_DIRECT_PRE);
1205   4                                              
1206   4      #ifdef FUNC_BEEP_SOUND_EN       
                                                      PushKeyBeep(1);
              #endif                                  
1209   4                                              gSys.MuteFg = FALSE;
1210   4      
1211   4      #ifdef FUNC_OPEN_FILE_DELAY_EN
                                                      TimeOutSet(&s_OpenFileDelayTimer, OPEN_FILE_DELAY_TIME);
                                                      s_IsOpenFileDelay = TRUE;
              #else
1215   4                                              if(!SongPlayInit())
1216   4                                              {
1217   5                                                      MessageSend(MSG_FIFO_KEY, MSG_PRE);
1218   5                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
1219   5                                              }       
1220   4      #endif
1221   4                                      }
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 21  

1222   3                                      else
1223   3                                      {
1224   4      #ifdef FUNC_OTP_PLAY_EN
                                                      if(gSys.SystemMode == SYS_MODE_OTPDEV)
                                                      {
                                                              SongPlayStop();
                                                              GetNextSongNum(PLAY_DIRECT_PRE);
                                                              gSys.MuteFg = FALSE;
                                                              if(!SongPlayInit())
                                                              {
                                                                      MessageSend(MSG_FIFO_KEY, MSG_PRE);
                                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
                                                              }
                                                              break;
                                                      }
              #endif
1238   4                                              DBG(("ONE S2\n"));
1239   4                                              DBG(("gPlayCtrl.FolderEnable:0x%bx, gFsInfo.ValidFolderSum:0x%x,gFsInfo.FileSum:0x%x\n", gPlayCtrl.Fo
             -lderEnable, gFsInfo.ValidFolderSum, gFsInfo.FileSum));
1240   4                                              DBG(("gPlayCtrl.File.FolderNum:0x%x,gPlayCtrl.Folder.IncFileCnt:0x%x\n", gPlayCtrl.File.FolderNum, gP
             -layCtrl.Folder.IncFileCnt));
1241   4                                              //To do...
1242   4      #ifdef FUNC_FOLDER_EN
                                                      if(gPlayCtrl.FolderEnable == TRUE)
                                                      {
                                                              DBG(("**gFsInfo.ValidFolderSum:%u,FolderSum:%u\n", gFsInfo.ValidFolderSum, gFsInfo.FolderSum));
                                                              if(gFsInfo.FolderSum > 1)
                                                              {
                                                                      MessageSend(MSG_FIFO_KEY, MSG_PRE_FOLDER);
                                                                      DBG(("**PrevFold\n"));
                                                              }
              #ifdef FUNC_UARTDBG_EN
                                                              else
                                                              {
                                                                      DBG(("**FoldSum = 1\n"));
                                                              }
              #endif  
                                                      }
              #else
1259   4                                              //MessageSend(MSG_FIFO_KEY, MSG_STOP);
1260   4      #endif
1261   4                                      }
1262   3                                      break;
1263   3      
1264   3      #ifdef  FUNC_NUMBER_KEY_EN
1265   3                              case MSG_FREQUP_10TRK:
1266   3                              case MSG_10TRACK_ADD:
1267   3                              case MSG_10TRACK_ADDCP: //10+
1268   3      #ifndef FUNC_FOLDER_EN
1269   3                                      if(gFsInfo.FileSum > 1)
1270   3      #else
                                              if(((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.Folder.IncFileCnt > 1) && (gPlayCtrl.File.FolderNum
             -))
                                              || ((gPlayCtrl.FolderEnable == FALSE) && (gFsInfo.FileSum > 1)))
              #endif
1274   3                                      {                                       
1275   4                                              SongPlayStop();
1276   4                                              GetNextSongNum(PLAY_DIRECT_NEXT_10);
1277   4                                              gSys.MuteFg = FALSE;
1278   4                                              if(!SongPlayInit())
1279   4                                              {
1280   5                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT);
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 22  

1281   5                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
1282   5                                              }
1283   4                                      }
1284   3                                      else
1285   3                                      {
1286   4                                              DBG(("10+,FN<1\n"));
1287   4                                              //DBG(("FileSum:0x%x\n", gFsInfo.FileSum));
1288   4                                              //DBG(("Folder.IncFileCnt:0x%x\n", gPlayCtrl.Folder.IncFileCnt));
1289   4                                              //To do...
1290   4                                              //MessageSend(MSG_FIFO_KEY, MSG_STOP);
1291   4                                      }
1292   3                                      break;
1293   3      
1294   3                              case MSG_FREQDN_10TRK:
1295   3                              case MSG_10TRACK_SUB:
1296   3                              case MSG_10TRACK_SUBCP:
1297   3      #ifndef FUNC_FOLDER_EN
1298   3                                      if(gFsInfo.FileSum > 1)
1299   3      #else
                                              if(((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.Folder.IncFileCnt > 1) && (gPlayCtrl.File.FolderNum
             -))
                                              || ((gPlayCtrl.FolderEnable == FALSE) && (gFsInfo.FileSum > 1)))
              #endif
1303   3                                      {                                       
1304   4                                              SongPlayStop();
1305   4                                              GetNextSongNum(PLAY_DIRECT_PRE_10);
1306   4                                              gSys.MuteFg = FALSE;
1307   4                                              if(!SongPlayInit())
1308   4                                              {
1309   5                                                      MessageSend(MSG_FIFO_KEY, MSG_PRE);
1310   5                                                      gPlayCtrl.State = PLAY_STATE_STOP; 
1311   5                                              }
1312   4                                      }
1313   3                                      else
1314   3                                      {
1315   4                                              DBG(("10-,FN<1\n"));
1316   4                                              //DBG(("FileSum:0x%x\n", gFsInfo.FileSum));
1317   4                                              //DBG(("Folder.IncFileCnt:0x%x\n", gPlayCtrl.Folder.IncFileCnt));
1318   4                                              //To do...
1319   4                                              //MessageSend(MSG_FIFO_KEY, MSG_STOP);
1320   4                                      }
1321   3                                      break;
1322   3      
1323   3                              case MSG_RECV_NUM:
1324   3                              case MSG_NUM_SAVE_STAITON:
1325   3                                      DBG(("MP3 RECV_NUM\n"));
1326   3      #ifdef FUNC_PICKSONG_WHOLE_DISK_EN
                                                      DBG(("WHOLE DISK,0\n"));
                                                      if((gFsInfo.FileSum >= gRecvNum) && (gRecvNum > 0))
              #else
1330   3                                              if( ((gFsInfo.FileSum >= gRecvNum)  && (gRecvNum > 0) && (gPlayCtrl.FolderEnable == FALSE))
1331   3      #ifdef FUNC_FOLDER_EN
                                                       || ((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.Folder.IncFileCnt >= gRecvNum))
              #endif
1334   3                                                      )
1335   3      #endif
1336   3                                              {
1337   4      #ifdef FUNC_PICKSONG_WHOLE_DISK_EN
                                                              DBG(("WHOLE DISK,1\n"));
                                                              if(gPlayCtrl.File.FileNumInDisk != gRecvNum)
              #else
1341   4                                                      if(gPlayCtrl.FileNum != gRecvNum)
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 23  

1342   4      #endif
1343   4                                                      {
1344   5                                                              DBG(("---MP3 RECV_NUM,RecvNum:%u,FileNum:%u,FileNumInDisk:%u\n", gRecvNum, gPlayCtrl.FileNum, gPlay
             -Ctrl.File.FileNumInDisk));
1345   5                                                              
1346   5                                                              SongPlayStop();
1347   5      #ifdef FUNC_PICKSONG_WHOLE_DISK_EN
                                                                      gPlayCtrl.FolderEnable = FALSE;
              #endif
1350   5                                                                      gPlayCtrl.FileNum = gRecvNum;
1351   5                                                                      gRecvNum = 0;
1352   5                                                                      if(!SongPlayInit())
1353   5                                                                      {
1354   6                                                                              MessageSend(MSG_FIFO_KEY, MSG_NEXT);
1355   6                                                                              gPlayCtrl.State = PLAY_STATE_STOP; 
1356   6                                                                      }
1357   5                                                                      DBG(("===MP3 RECV_NUM,RecvNum:%u,FileNum:%u,FileNumInDisk:%u\n", gRecvNum, gPlayCtrl.FileNum, gPla
             -yCtrl.File.FileNumInDisk));
1358   5                                                      }       
1359   4                                              }                               
1360   3      #ifdef FUNC_DISP_EN                     
1361   3                                      if((gRecvNum > gFsInfo.FileSum) && (gRecvNum > 0))
1362   3                                      {
1363   4                                              TimeOutSet(&DispTmr, NORMAL_INTERVAL);  //按遥控确认键输入错误Err显示保留时间
1364   4                                      }
1365   3                                      else
1366   3                                      {
1367   4                                              TimeOutSet(&DispTmr, 0);        //退出数值显示
1368   4                                      }
1369   3                                      gRecvNum = 0;
1370   3      #endif
1371   3                                      break;
1372   3      #endif
1373   3      
1374   3      
1375   3      #ifdef FUNC_FOLDER_EN
                                      case MSG_FOLDER_EN:
                                              if(gPlayCtrl.FolderEnable)
                                              {
                                                      DBG(("FOLDER_DIS\n"));
                                                      gPlayCtrl.FolderEnable = FALSE;
                                                      gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInDisk;
                                              }
                                              else
                                              {
                                                      DBG(("FOLDER_EN\n"));
                                                      gPlayCtrl.FolderEnable = TRUE;
                                                      gPlayCtrl.FileNum = gPlayCtrl.File.FileNumInFolder;
                                              }       
              #ifdef FUNC_BREAK_POINT_EN
                                              if(gSys.SystemMode == SYS_MODE_USB)     
                                              {               
                                                      BP_SaveInfo(&gBreakPointInfo.PowerMemory.USB_FolderEnFlag, sizeof(gBreakPointInfo.PowerMemory.USB_Fol
             -derEnFlag));
                                              }
                                              else if(gSys.SystemMode == SYS_MODE_SD)
                                              {
                                                      BP_SaveInfo(&gBreakPointInfo.PowerMemory.SD_FolderEnFlag, sizeof(gBreakPointInfo.PowerMemory.SD_Folde
             -rEnFlag));
                                              }                                                       
              #endif
              
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 24  

              #ifdef FUNC_DISP_EN
                                              DispFoldState();
              #endif
                                              break;
                      
                                      case MSG_NEXT_FOLDER:
                                              DBG(("NEXT_FOLDER\n")); 
                                              gPlayCtrl.FolderEnable = TRUE;
                                              
              #ifdef FUNC_OPEN_FILE_DELAY_EN
                                              s_IsOpenFileDelay = FALSE;
              #endif
              
                                              SongPlayStop();
                                              if(gPlayCtrl.FolderNum < gFsInfo.ValidFolderSum)
                                              {
                                                      gPlayCtrl.FolderNum++;
                                              }
                                              else
                                              {
                                                      gPlayCtrl.FolderNum = 1;
                                              }
                      
                                              if(!FolderOpenByValidNum(&gPlayCtrl.Folder, NULL, gPlayCtrl.FolderNum))
                                              {
                                                      DBG(("FolderOpenByValidNum() error!\n"));
                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT_FOLDER);
                                                      return;
                                              }
                                              DBG(("FolderOpenByValidNum(0x%lx, NULL, %u)\n", (DWORD)(&gPlayCtrl.Folder), gPlayCtrl.FolderNum));
                                              DBG(("gPlayCtrl.File.FolderNum:0x%x, gPlayCtrl.Folder.IncFileCnt:0x%x\n", gPlayCtrl.File.FolderNum, gP
             -layCtrl.Folder.IncFileCnt));
                                              
                                              gPlayCtrl.FileNum = 1;
                                              gSys.MuteFg = FALSE;
                                              if(!SongPlayInit())
                                              {
                                                      DBG(("SongPlayInit error!\n"));
                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT); 
                                              }
                                              DBG(("SongPlayInit OK!\n"));
                                              break;
                      
                                      case MSG_PRE_FOLDER:
                                              DBG(("PRE_FOLDER\n"));  
                                              gPlayCtrl.FolderEnable = TRUE;  
                                              
              #ifdef FUNC_OPEN_FILE_DELAY_EN
                                              s_IsOpenFileDelay = FALSE;
              #endif  
              
                                              SongPlayStop();
                                              if(gPlayCtrl.FolderNum > 1)
                                              {
                                                      gPlayCtrl.FolderNum--;
                                              }
                                              else
                                              {
                                                      gPlayCtrl.FolderNum = gFsInfo.ValidFolderSum;
                                              }
                      
                                              if(!FolderOpenByValidNum(&gPlayCtrl.Folder, NULL, gPlayCtrl.FolderNum))
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 25  

                                              {
                                                      DBG(("FolderOpenByValidNum() error!\n"));
                                                      MessageSend(MSG_FIFO_KEY, MSG_PRE_FOLDER);
                                                      return;
                                              }
                                              DBG(("FolderOpenByValidNum(0x%lx, NULL, %u)\n", (DWORD)(&gPlayCtrl.Folder), gPlayCtrl.FolderNum));
                                              DBG(("gPlayCtrl.File.FolderNum:0x%x, gPlayCtrl.Folder.IncFileCnt:0x%x\n", gPlayCtrl.File.FolderNum, gP
             -layCtrl.Folder.IncFileCnt));
                      
                                              gPlayCtrl.FileNum = 1;
                                              gSys.MuteFg = FALSE;
                                              if(!SongPlayInit())
                                              {
                                                      MessageSend(MSG_FIFO_KEY, MSG_NEXT); 
                                              }
                                              break;
              #endif
1477   3              
1478   3      #ifdef FUNC_FILE_BROWSER_EN
                                      case MSG_BROWSE_START:
                                              FileBrowseInit();
                                              SongPlayStop();
                                              gPlayCtrl.State = PLAY_STATE_BROWSE;
                                              gPlayCtrl.Event = MSG_NONE;
                                              break;
              #endif
1486   3      
1487   3      #ifdef FUNC_SPI_UPDATE_EN
                                      case MSG_UPDATE_FLASH:
                                              if(gIsMVFFileFind == 1)
                                              {
                                                      BOOL  IsResume = FALSE;
                                                      
                                                      DBG(("Update MVF start....\n"));
                                                      //保护现场
                                                      //SectNum = gPlayCtrl.File.OpSec;                                       
                                                      if (gPlayCtrl.State == PLAY_STATE_PLAY)
                                                      {
                                                              PlayStatePauseOp();
                                                              IsResume = TRUE;
                                                      }
                                                      
                                                      DownloadMVFToFsh();
                                                      gIsMVFFileFind = 2;
                                                      DBG(("Update MVF finish...\n"));
                                                      
                                                      //gPlayCtrl.File.OpSec = SectNum;
                                                      //恢复播放
                                                      if(IsResume == TRUE)
                                                      {
                                                              //PlayVolDecd(); //设置音量     
                                                              PlayStatePlayOp();
                                                      }                               
                                              }
                                              break;
              #endif
1516   3              
1517   3                              default:                        
1518   3                                      break;
1519   3                      }
1520   2                      
1521   2      #ifdef FUN_SYSTEM_POWEROFF_WAIT_TIME
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 26  

                              SystemOffTimeMsgPro(gPlayCtrl.Event);
              #endif
1524   2              }
1525   1      
1526   1      
1527   1      #ifdef BT_BtPOWEROFF_TIME
              
                      if(gPlayCtrl.State != PLAY_STATE_PLAY && !PowerOffTimeBeginFlag)
                      {
                              PowerOffTimeBeginFlag = TRUE;
                              TimeOutSet(&SDCARDPOWEROFF_TIME, BT_BtPOWEROFF_TIME);
                              SDCARDPowerOffTime_Start =      TRUE;
                              DBG1(("begin !!!\n"));
                              
                      }
              
                      if(gPlayCtrl.State == PLAY_STATE_PLAY && PowerOffTimeBeginFlag)
                      {
                              //TimeOutSet(&SDCARDPOWEROFF_TIME, 0);
                              PowerOffTimeBeginFlag = FALSE;
                              SDCARDPowerOffTime_Start = FALSE;
                              DBG1(("END!!!\n"));
                      }
              
                      
              #if defined(AU6210K_ZB_BT007_CSR)
                      if(SDCARDPowerOffTime_Start)
                      if(IsTimeOut(&SDCARDPOWEROFF_TIME))
                      {
                              //关机流程
                              DBG1(("power off doing\n"));
              
                              if(gPlayCtrl.State != PLAY_STATE_PLAY )
                              {
                                      
                                      WaitMs(2);
                                      SPI_PlaySelectNum(SPIPLAY_SONG_POWEROFF, 0);//关机提示音
                                      WaitMs(1000);
                                      SystemOff();
                              }else
                              {
                                      SDCARDPowerOffTime_Start = FALSE;
                                      TimeOutSet(&SDCARDPOWEROFF_TIME, 0);
                              }
                      }
              #endif  
              #endif
1569   1      
1570   1              switch(gPlayCtrl.State)
1571   1              {
1572   2                      case PLAY_STATE_PLAY:
1573   2                              PlayStatePlayOp();
1574   2                              break;
1575   2      
1576   2                      case PLAY_STATE_PAUSE:
1577   2                              PlayStatePauseOp();
1578   2                              break;
1579   2      
1580   2                      case PLAY_STATE_STOP:
1581   2                              PlayStateStopOp();
1582   2                              break;
1583   2      
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 27  

1584   2      #ifdef FUNC_FAST_PLAY_EN
                              case PLAY_STATE_FF:                     
                              case PLAY_STATE_FB:                     
                                      PlayStateFF_FBOp();
                                      break;
              #endif
1590   2                      
1591   2      #ifdef FUNC_FILE_BROWSER_EN
                              case PLAY_STATE_BROWSE:
                                      PlayStateBrowseOp();
                                      break;
              #endif
1596   2      
1597   2                      default:
1598   2                              break;
1599   2              }       
1600   1      
1601   1              SongPlayTimeUpdate();
1602   1      }
1603          
1604          
1605          // Initialize playing control structure extend.
1606          BOOL PlayCtrlInit(VOID)
1607          {
1608   1              DBG(("PlayCtrlInit()\n"));
1609   1      #ifndef FUNC_FOLDER_EN
1610   1                      gPlayCtrl.FolderEnable = FALSE;
1611   1      #else
                              if(gPlayCtrl.FolderEnable > 1)
                              {
                                      gPlayCtrl.FolderEnable = TRUE;  
                              }       
              #endif
1617   1      
1618   1      #ifdef FUNC_OPEN_FILE_DELAY_EN
                      s_IsOpenFileDelay = FALSE;
              #endif
1621   1                      
1622   1      #ifdef FUNC_BREAK_POINT_EN
1623   1              if(IsBPValid() == TRUE)
1624   1              {               
1625   2                      if(gIsFindLastestSong == FALSE)
1626   2                      {
1627   3                              DBG(("play frist song\n"));
1628   3                              s_BreakPointFlag = FALSE;
1629   3                              gPlayCtrl.FileNum = 1;
1630   3      #ifdef FUNC_FOLDER_EN                           
                                      gPlayCtrl.FolderNum = 1;
              #endif     
1633   3                              //gPlayCtrl.Eq = DECD_EQ_NORMAL;
1634   3                              gPlayCtrl.RepeatMode = REPEAT_ALL;
1635   3                      }
1636   2                      else if(gCurFileNum > 0)
1637   2                      {
1638   3                              s_BreakPointFlag = TRUE;
1639   3                              if(gCurFileNum > gFsInfo.FileSum)
1640   3                              {
1641   4                                      //DBG(("PlayCtrlInit,502\n"));
1642   4                                      gCurFileNum = 1;
1643   4                              }
1644   3                              if(gCurFolderNum > gFsInfo.FolderSum)
1645   3                              {
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 28  

1646   4                                      //DBG(("PlayCtrlInit,503\n"));
1647   4                                      gCurFolderNum = 1;
1648   4                              }
1649   3      
1650   3      #ifdef FUNC_FOLDER_EN
                                      if(gPlayCtrl.FolderEnable == TRUE)
                                      { 
                                              gPlayCtrl.FileNum = gCurFileNumInFolder;
                                              gPlayCtrl.FolderNum = GetValidFolderNum(gCurFolderNum);
                                              DBG(("BP FoldNum:%u,ValidFoldNum:%u\n", gCurFolderNum, GetValidFolderNum(gCurFolderNum)));      
                                      }
                                      else
                                      {
                                              gPlayCtrl.FileNum = gCurFileNum;
                                              gPlayCtrl.FolderNum = 1;
                                      }
                                      
              #else
1664   3                              gPlayCtrl.FolderEnable = FALSE;
1665   3                              gPlayCtrl.FileNum = gCurFileNum;
1666   3      #endif
1667   3      
1668   3                              //gPlayCtrl.Eq = gBreakPointInfo.Eq;    
1669   3                              //gPlayCtrl.RepeatMode = gBreakPointInfo.RepeatMode;
1670   3                              gPlayCtrl.RepeatMode = REPEAT_ALL;      //Repeat 模式不记忆
1671   3                              
1672   3      //                      DBG(("gPlayCtrl.FolderEnable:%bu\n", gPlayCtrl.FolderEnable));
1673   3      //                      DBG(("gPlayCtrl.FileNum:%u, gPlayCtrl.FolderNum:%u\n", gPlayCtrl.FileNum, gPlayCtrl.FolderNum));
1674   3      //                      DBG(("gPlayCtrl.Eq:%bu\n", gPlayCtrl.Eq));
1675   3      //                      DBG(("gPlayCtrl.RepeatMode:%bu\n", gPlayCtrl.RepeatMode));
1676   3                      }
1677   2              }
1678   1              else
1679   1              {
1680   2                      s_BreakPointFlag = FALSE;
1681   2                      gPlayCtrl.FolderNum = 1;
1682   2                      gPlayCtrl.FileNum = 1;
1683   2                      //gPlayCtrl.Eq = DECD_EQ_NORMAL;
1684   2                      gPlayCtrl.RepeatMode = REPEAT_ALL;
1685   2                      gSongInfo.CurPlayTime = 0;
1686   2                      DBG(("BP InVald\n"));           
1687   2              }
1688   1      #else
                      DBG(("\n!BP\n\n"));
                      s_BreakPointFlag = FALSE;
                      gPlayCtrl.FolderNum = 1;
                      gPlayCtrl.FileNum = 1;
                      //gPlayCtrl.Eq = DECD_EQ_NORMAL;
                      gPlayCtrl.RepeatMode = REPEAT_ALL;
                      gSongInfo.CurPlayTime = 0;
              #endif
1697   1      
1698   1              gPlayCtrl.Direction = PLAY_DIRECT_NEXT;
1699   1      
1700   1      #ifdef FUNC_FOLDER_EN
                      if((gSys.SystemMode != SYS_MODE_OTPDEV))
                      {
                              if(gPlayCtrl.FolderNum > gFsInfo.FolderSum)
                              {
                                      gPlayCtrl.FolderNum = 1;
                              }
              
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 29  

                              if(!FolderOpenByValidNum(&gPlayCtrl.Folder, NULL, gPlayCtrl.FolderNum))
                              {
                                      DBG(("FolderOpenByValidNum() error!\n"));
                                      return FALSE;
                              }
              #ifdef  FUNC_LONG_NAME_EN               //长文件名功能                                                                                                           
                              {
                                      BYTE LongFileName[66];   
                                      BOOL Ret;
                                      WORD* p;
              
                                      Ret = FolderGetLongName(&gPlayCtrl.Folder, LongFileName);
                                      DBG(("FolderGetLongName %d\n", (WORD)Ret));
                                      for(p = (WORD*)LongFileName; *p != 0; p++)
                                      {
                                              DBG(("%-.2BX %-.2BX ", ((BYTE*)p)[0], ((BYTE*)p)[1]));
                                      }
                                      DBG(("\n"));
                              }
              #endif
              
                              if((gPlayCtrl.FolderEnable == TRUE) && (gPlayCtrl.FileNum > gPlayCtrl.Folder.IncFileCnt))
                              {
                                      DBG(("PlayCtrlInit, 505\n"));
                                      gPlayCtrl.FileNum = 1;
                              }
                      }
              #endif
1736   1      
1737   1              if(gFsInfo.FileSum == 0)
1738   1              {
1739   2                      DBG(("No Song in Disk!!\n"));
1740   2                      gPlayCtrl.State = PLAY_STATE_STOP;
1741   2                      return TRUE;
1742   2              }
1743   1      
1744   1              //DBG(("gPlayCtrl.State11:%bx\n",gPlayCtrl.State));
1745   1              
1746   1              gPlayCtrl.State = PLAY_STATE_STOP;
1747   1      #ifdef FUNC_AUTO_PLAY_EN
1748   1              if(!SongPlayInit())
1749   1              {
1750   2                      MessageSend(MSG_FIFO_KEY, MSG_NEXT);    
1751   2              }
1752   1      #endif
1753   1              //DBG(("gPlayCtrl.State22:%bx\n", gPlayCtrl.State));
1754   1      //清标志
1755   1      #ifdef FUNC_BREAK_POINT_EN      
1756   1              gCurFileNum = 0;
1757   1              gCurFileNumInFolder = 0;
1758   1              gCurFolderNum = 0;
1759   1      #endif 
1760   1      
1761   1              return TRUE;
1762   1      }
1763          
1764          
1765          // Call this function before leaving play state.
1766          BOOL PlayCtrlEnd(VOID)
1767          {
1768   1              DBG(("PlayCtrlEnd()\n"));
1769   1              
C51 COMPILER V9.00   PLAYCTRL                                                              12/30/2015 18:11:20 PAGE 30  

1770   1              //关闭DAC       
1771   1              SongPlayStop(); 
1772   1      
1773   1              return TRUE;
1774   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2517    ----
   CONSTANT SIZE    =    176    ----
   XDATA SIZE       =    123       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
