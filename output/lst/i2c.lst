C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\output\obj\i2c.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE eeprom\i2c.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\config;.
                    -\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\bluetooth
                    -;.\i2c) DEBUG PRINT(.\output\lst\i2c.lst) OBJECT(.\output\obj\i2c.obj)

line level    source

   1          #include<string.h>
   2          #include <reg51.h>
   3          #include <intrins.h>
   4          
   5          #include "syscfg.h"
   6          #include "i2c.h"
   7          #include "debug.h"
   8          
   9          #if (defined(FUNC_RADIO_EN))
  10          //SCL
  11          #define FM_PORT_OUT_SCL                 GPIO_FMD_OUT
  12          #define FM_PORT_IN_SCL                  GPIO_FMD_IN
  13          #define FM_PORT_IE_SCL                  GPIO_FMD_IE
  14          #define FM_PORT_OE_SCL                  GPIO_FMD_OE     
  15          #define FM_PORT_PU_SCL                  GPIO_FMD_PU
  16          #define FM_PORT_PD_SCL                  GPIO_FMD_PD
  17          #define FM_MASK_BIT_SCL                 0x02            
  18          
  19          //SDA
  20          #define FM_PORT_OUT_SDA                 GPIO_FMD_OUT
  21          #define FM_PORT_IN_SDA                  GPIO_FMD_IN
  22          #define FM_PORT_IE_SDA                  GPIO_FMD_IE
  23          #define FM_PORT_OE_SDA                  GPIO_FMD_OE             
  24          #define FM_PORT_PU_SDA                  GPIO_FMD_PU
  25          #define FM_PORT_PD_SDA                  GPIO_FMD_PD
  26          #define FM_MASK_BIT_SDA                 0x01
  27          #endif
  28          
  29          
  30          #if (defined(FUNC_PT231X_IIC) || \
  31                   defined(FUNC_RADIO_EN) || \
  32                   defined(FUNC_NPCA110X_EN) || \
  33                   (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM)))
  34          //#define IMPROVE_FM_SEEK_NOISE //针对不同硬件设计，改善FM I2C通讯(搜台或切换频点操作)可能引起的噪声问题
  35          
  36          #if defined(IMPROVE_FM_SEEK_NOISE)
              #define KtIICDelay()    WaitUs(10)      //此延时时间可以根据实际测试结果调整
              #elif defined(FUNC_PT231X_IIC)
              #define KtIICDelay()    WaitUs(10)      //此延时时间可以根据实际测试结果调整
              #else
  41          #define KtIICDelay()    WaitUs(18)
  42          #endif
  43          
  44          VOID SetOutputSCL(BYTE I2cDevice)
  45          {
  46   1              EA = 0;
  47   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OE_SCL] |= (MASK_BIT_SCL);
                              baGPIOCtrl[PORT_IE_SCL] &= (~MASK_BIT_SCL);
                      }
                      
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 2   

              #else   
  55   1      
  56   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OE_SCL] |= (MASK_BIT_SCL);
                              baGPIOCtrl[PORT_IE_SCL] &= (~MASK_BIT_SCL);
                      }
              #endif
  63   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else 
              #endif
  66   1      #if (defined(FUNC_RADIO_EN))    
  67   1              if(I2cDevice == FM_IIC)
  68   1              {       
  69   2      #if !defined(IMPROVE_FM_SEEK_NOISE)
  70   2                      baGPIOCtrl[FM_PORT_OE_SCL] |= (FM_MASK_BIT_SCL);
  71   2                      baGPIOCtrl[FM_PORT_IE_SCL] &= (~FM_MASK_BIT_SCL);       
  72   2      #endif
  73   2      
  74   2              }
  75   1      #endif  
  76   1      
  77   1      #endif
  78   1              EA = 1;
  79   1      }       
  80          
  81                                                          
  82          VOID SetSCL(BYTE I2cDevice)
  83          {               
  84   1              EA = 0;
  85   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
              
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OUT_SCL] |= MASK_BIT_SCL;
                      }
              #else   
  92   1              
  93   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OUT_SCL] |= MASK_BIT_SCL;
                      }
              #endif
  99   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 102   1      #if (defined(FUNC_RADIO_EN))
 103   1              if(I2cDevice == FM_IIC)
 104   1              {
 105   2      #if defined(IMPROVE_FM_SEEK_NOISE)
                              baGPIOCtrl[FM_PORT_PU_SCL] &= (~FM_MASK_BIT_SCL);       
                              baGPIOCtrl[FM_PORT_PD_SCL] &= (~FM_MASK_BIT_SCL);
                              baGPIOCtrl[FM_PORT_OE_SCL] &= (~FM_MASK_BIT_SCL);
                              baGPIOCtrl[FM_PORT_IE_SCL] |= FM_MASK_BIT_SCL;  
              #else
 111   2                      baGPIOCtrl[FM_PORT_OUT_SCL] |= FM_MASK_BIT_SCL;
 112   2      #endif
 113   2              }
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 3   

 114   1      #endif
 115   1      
 116   1      #endif
 117   1              EA = 1;
 118   1      }
 119          
 120                                                  
 121          VOID ClrSCL(BYTE I2cDevice)
 122          {               
 123   1              EA = 0;
 124   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OUT_SCL] &= (~MASK_BIT_SCL);
                      }
              #else   
 130   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OUT_SCL] &= (~MASK_BIT_SCL);
                      }
              #endif 
 136   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif 
 139   1      #if (defined(FUNC_RADIO_EN))
 140   1      if(I2cDevice == FM_IIC)
 141   1              {
 142   2      #if defined(IMPROVE_FM_SEEK_NOISE)
                              baGPIOCtrl[FM_PORT_PU_SCL] |= FM_MASK_BIT_SCL;  
                              baGPIOCtrl[FM_PORT_PD_SCL] |= (FM_MASK_BIT_SCL);
                              baGPIOCtrl[FM_PORT_OE_SCL] &= (~FM_MASK_BIT_SCL);
                              baGPIOCtrl[FM_PORT_IE_SCL] |= FM_MASK_BIT_SCL;  
              #else
 148   2                      baGPIOCtrl[FM_PORT_OUT_SCL] &= (~FM_MASK_BIT_SCL);
 149   2      #endif
 150   2              }
 151   1      #endif
 152   1      
 153   1      #endif
 154   1              EA = 1;
 155   1      }
 156          
 157          
 158          VOID SetInputSDA(BYTE I2cDevice)
 159          {       
 160   1              EA = 0;
 161   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OE_SDA] &= (~MASK_BIT_SDA);
                              baGPIOCtrl[PORT_IE_SDA] |= MASK_BIT_SDA;
                      }
              #else
 168   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OE_SDA] &= (~MASK_BIT_SDA);
                              baGPIOCtrl[PORT_IE_SDA] |= MASK_BIT_SDA;
                      }
              #endif
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 4   

 175   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 178   1      #if (defined(FUNC_RADIO_EN))
 179   1              if(I2cDevice == FM_IIC)
 180   1              {
 181   2                      baGPIOCtrl[FM_PORT_OE_SDA] &= (~FM_MASK_BIT_SDA);
 182   2                      baGPIOCtrl[FM_PORT_IE_SDA] |= FM_MASK_BIT_SDA;
 183   2              }
 184   1      #endif
 185   1      #endif
 186   1              EA = 1;
 187   1      }
 188          
 189                                                          
 190          VOID SetOutputSDA(BYTE I2cDevice)
 191          {       
 192   1              EA = 0;
 193   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OE_SDA] |= MASK_BIT_SDA;
                              baGPIOCtrl[PORT_IE_SDA] &= (~MASK_BIT_SDA);
                      }
              #else
 200   1              
 201   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OE_SDA] |= MASK_BIT_SDA;
                              baGPIOCtrl[PORT_IE_SDA] &= (~MASK_BIT_SDA);
                      }
              #endif
 208   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 211   1      #if (defined(FUNC_RADIO_EN))
 212   1              if(I2cDevice == FM_IIC)
 213   1              {
 214   2      #if !defined(IMPROVE_FM_SEEK_NOISE)
 215   2                      baGPIOCtrl[FM_PORT_OE_SDA] |= FM_MASK_BIT_SDA;
 216   2                      baGPIOCtrl[FM_PORT_IE_SDA] &= (~FM_MASK_BIT_SDA);
 217   2      #endif
 218   2              }
 219   1      #endif
 220   1      
 221   1      #endif
 222   1              EA = 1;
 223   1      }
 224          
 225                                                          
 226          VOID SetSDA(BYTE I2cDevice)
 227          {
 228   1              EA = 0;
 229   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OUT_SDA] |= MASK_BIT_SDA;
                      }
              #else
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 5   

 235   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OUT_SDA] |= MASK_BIT_SDA;
                      }
              #endif
 241   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 244   1      #if (defined(FUNC_RADIO_EN))
 245   1              if(I2cDevice == FM_IIC)
 246   1              {       
 247   2      #if defined(IMPROVE_FM_SEEK_NOISE)
                              baGPIOCtrl[FM_PORT_PU_SDA] &= (~FM_MASK_BIT_SDA);       
                              baGPIOCtrl[FM_PORT_PD_SDA] &= (~FM_MASK_BIT_SDA);
                              baGPIOCtrl[FM_PORT_OE_SDA] &= (~FM_MASK_BIT_SDA);
                              baGPIOCtrl[FM_PORT_IE_SDA] |= FM_MASK_BIT_SDA;  
              #else
 253   2                      baGPIOCtrl[FM_PORT_OUT_SDA] |= FM_MASK_BIT_SDA;
 254   2      #endif
 255   2              }
 256   1      #endif
 257   1      #endif
 258   1              EA = 1;
 259   1      }
 260          
 261                                                  
 262          VOID ClrSDA(BYTE I2cDevice)
 263          {
 264   1              EA = 0;
 265   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {
                              baGPIOCtrl[PORT_OUT_SDA] &= (~MASK_BIT_SDA);
                      }
                      
              #else
 272   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
                      if(I2cDevice == EEPROM_IIC)
                      {
                              baGPIOCtrl[PORT_OUT_SDA] &= (~MASK_BIT_SDA);
                      }
              #endif
 278   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 281   1      #if (defined(FUNC_RADIO_EN))
 282   1              if(I2cDevice == FM_IIC)
 283   1              {       
 284   2      #if defined(IMPROVE_FM_SEEK_NOISE)
                              baGPIOCtrl[FM_PORT_PU_SDA] |= FM_MASK_BIT_SDA;  
                              baGPIOCtrl[FM_PORT_PD_SDA] |= FM_MASK_BIT_SDA;
                              baGPIOCtrl[FM_PORT_OE_SDA] &= (~FM_MASK_BIT_SDA);
                              baGPIOCtrl[FM_PORT_IE_SDA] |= FM_MASK_BIT_SDA;  
              #else
 290   2                      baGPIOCtrl[FM_PORT_OUT_SDA] &= (~FM_MASK_BIT_SDA);
 291   2      #endif
 292   2              }
 293   1      #endif
 294   1      #endif
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 6   

 295   1              EA = 1;
 296   1      }
 297          
 298                                                  
 299          BYTE GetSDA(BYTE I2cDevice)
 300          {
 301   1      #if defined(FUNC_PT231X_IIC)||defined(AU6210K_NR_D_8_CSRBT)
                      if((I2cDevice == PT231X_IIC) || (I2cDevice == NPCA110X_IIC))
                      {               
                              return (baGPIOCtrl[PORT_IN_SDA] & MASK_BIT_SDA);
                      }
                      
              #else
 308   1      
 309   1      #if     (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))    
                      if(I2cDevice == EEPROM_IIC)
                      {               
                              return (baGPIOCtrl[PORT_IN_SDA] & MASK_BIT_SDA);
                      }
              #endif
 315   1      #if ((defined(FUNC_RADIO_EN)) && (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_REST
             -ORE_DEVICE_EEPROM)))
                      else
              #endif
 318   1      #if (defined(FUNC_RADIO_EN))
 319   1              if(I2cDevice == FM_IIC)
 320   1              {
 321   2                      return  (baGPIOCtrl[FM_PORT_IN_SDA] & FM_MASK_BIT_SDA);
 322   2              }
 323   1      #endif
 324   1      #endif
 325   1      }
 326          
 327          
 328          VOID I2C_Init(VOID)
 329          {
 330   1              baGPIOCtrl[PORT_OE_SCL] |= MASK_BIT_SCL;
 331   1              baGPIOCtrl[PORT_IE_SCL] &= (~MASK_BIT_SCL);
 332   1              baGPIOCtrl[PORT_DS_SCL] |= MASK_BIT_SCL;
 333   1              baGPIOCtrl[PORT_PU_SCL] &= (~MASK_BIT_SCL);
 334   1              baGPIOCtrl[PORT_PD_SCL] &= (~MASK_BIT_SCL);
 335   1      
 336   1              baGPIOCtrl[PORT_OE_SDA] |= MASK_BIT_SDA;
 337   1              baGPIOCtrl[PORT_IE_SDA] &= (~MASK_BIT_SDA);
 338   1              baGPIOCtrl[PORT_DS_SDA] |= MASK_BIT_SDA;
 339   1              baGPIOCtrl[PORT_PU_SDA] &= (~MASK_BIT_SDA);
 340   1              baGPIOCtrl[PORT_PD_SDA] &= (~MASK_BIT_SDA);     
 341   1      }
 342          
 343          
 344          // send START signal. 
 345          VOID I2C_Start(BYTE I2cDevice)
 346          {
 347   1              SetSDA(I2cDevice);
 348   1              SetSCL(I2cDevice);
 349   1              
 350   1              SetOutputSCL(I2cDevice);
 351   1              SetOutputSDA(I2cDevice);
 352   1      
 353   1              SetSDA(I2cDevice);
 354   1              SetSCL(I2cDevice);
 355   1              KtIICDelay();
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 7   

 356   1              ClrSDA(I2cDevice);
 357   1              ClrSCL(I2cDevice);
 358   1      }
 359          
 360          
 361          // send STOP signal. 
 362          VOID I2C_Stop(BYTE I2cDevice)
 363          {
 364   1      //      DBG(("I2C_Stop()\n")); 
 365   1              SetOutputSCL(I2cDevice);
 366   1              SetOutputSDA(I2cDevice);
 367   1              
 368   1              ClrSDA(I2cDevice);      
 369   1              KtIICDelay();
 370   1              SetSCL(I2cDevice);
 371   1              SetSDA(I2cDevice);
 372   1      
 373   1              SetInputSDA(I2cDevice);
 374   1      }
 375          
 376          
 377          // send Acknowledgement(ACK or NACK) signal. 
 378          VOID I2C_SendAck(BYTE I2cDevice)
 379          {
 380   1      //      DBG(("I2C_SendAck()\n"));       
 381   1              ClrSDA(I2cDevice); 
 382   1              SetSCL(I2cDevice);
 383   1              KtIICDelay();
 384   1              ClrSCL(I2cDevice);
 385   1      }
 386          
 387          
 388          // send Acknowledgement(ACK or NACK) signal. 
 389          VOID I2C_SendNoAck(BYTE I2cDevice)
 390          {
 391   1              SetSDA(I2cDevice); 
 392   1              SetSCL(I2cDevice);
 393   1              KtIICDelay();
 394   1              ClrSCL(I2cDevice);
 395   1      }
 396          
 397          
 398          // Check Ackowledge signal(ACK/NACK). 
 399          BOOL I2C_ChkAck(BYTE I2cDevice)
 400          {
 401   1              BOOL Ack;
 402   1      
 403   1              ClrSCL(I2cDevice);
 404   1              SetInputSDA(I2cDevice);
 405   1              SetSCL(I2cDevice);
 406   1              KtIICDelay();
 407   1              Ack = !GetSDA(I2cDevice);
 408   1              ClrSCL(I2cDevice);
 409   1              return Ack;
 410   1      }
 411          
 412          BOOL I2C_WriteDWord(DWORD Dat, BYTE I2cDevice)
 413          {
 414   1              BYTE i = sizeof(DWORD);
 415   1      
 416   1              DBG(("I2C_WriteByte(%X)\n", Dat)); 
 417   1              SetOutputSDA(I2cDevice);         
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 8   

 418   1              ClrSCL(I2cDevice);
 419   1              while(i--)
 420   1              {
 421   2                      if(Dat & 0x80000000)                            //MSB output first
 422   2                      {
 423   3                              SetSDA(I2cDevice); 
 424   3                      }
 425   2                      else
 426   2                      {
 427   3                              ClrSDA(I2cDevice); 
 428   3                      }
 429   2                      Dat <<= 1;
 430   2                      SetSCL(I2cDevice);
 431   2                      KtIICDelay();
 432   2                      ClrSCL(I2cDevice);
 433   2              }
 434   1              return I2C_ChkAck(I2cDevice);
 435   1      }
 436          
 437          // Send one byte via I2C(check ACK). 
 438          BOOL I2C_WriteByte(BYTE Dat, BYTE I2cDevice)
 439          {
 440   1              BYTE i = 8;
 441   1              static BYTE j = 1;
 442   1              //DBG(("(%-.2BX)", Dat)); 
 443   1              
 444   1              SetOutputSDA(I2cDevice);         
 445   1              ClrSCL(I2cDevice);
 446   1              while(i--)
 447   1              {
 448   2                      if(Dat & 0x80)                          //MSB output first
 449   2                      {
 450   3                              SetSDA(I2cDevice); 
 451   3                      }
 452   2                      else
 453   2                      {
 454   3                              ClrSDA(I2cDevice); 
 455   3                      }
 456   2                      Dat <<= 1;
 457   2                      SetSCL(I2cDevice);
 458   2                      KtIICDelay();
 459   2                      ClrSCL(I2cDevice);
 460   2              }
 461   1              return I2C_ChkAck(I2cDevice);
 462   1      }
*** WARNING C280 IN LINE 441 OF EEPROM\I2C.C: 'j': unreferenced local variable
 463          
 464          
 465          // Receive one byte via I2C. 
 466          BYTE I2C_ReadByte(BYTE I2cDevice)
 467          {
 468   1              BYTE i = 8;
 469   1              BYTE Dat = 0;
 470   1      
 471   1              SetInputSDA(I2cDevice);
 472   1              while(i--)
 473   1              {       
 474   2                      Dat <<= 1;
 475   2                      if(GetSDA(I2cDevice))
 476   2                      {
 477   3                              Dat |= 0x01;
 478   3                      }
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 9   

 479   2                      SetSCL(I2cDevice);
 480   2                      KtIICDelay();
 481   2                      ClrSCL(I2cDevice);       
 482   2              }
 483   1              SetOutputSDA(I2cDevice);
 484   1              return Dat;
 485   1      }
 486          
 487          
 488          BOOL I2C_WriteBytes(BYTE* Buf, BYTE Len, BYTE I2cDevice)
 489          {
 490   1              while(Len--)
 491   1              {
 492   2                      if(!I2C_WriteByte(*(Buf++), I2cDevice))
 493   2                      {
 494   3                              DBG(("I2C WR err\n"));
 495   3                              return FALSE;
 496   3                      }
 497   2              }
 498   1      
 499   1              return TRUE;
 500   1      }
 501          
 502          
 503          // Read data via I2C. 
 504          BOOL I2C_ReadBytes(BYTE* Buf, BYTE Len, BYTE I2cDevice)
 505          {
 506   1              while(Len--)
 507   1              {
 508   2                      *(Buf++) = I2C_ReadByte(I2cDevice);
 509   2                      if(Len == 0)
 510   2                      {
 511   3                              I2C_SendNoAck(I2cDevice);
 512   3                      }
 513   2                      else
 514   2                      {
 515   3                              I2C_SendAck(I2cDevice);
 516   3                      }
 517   2              }
 518   1      
 519   1              return TRUE;
 520   1      }
 521          
 522          
 523          extern BOOL SongPlayDo(VOID);           
 524          extern VOID KeyEventGet(VOID);  
 525          // Write data to eeprom from buffer
 526          BOOL I2C_WriteNByte(BYTE DevAddr, WORD Addr, BYTE* Buf, BYTE Len, BYTE I2cDevice)
 527          {
 528   1              BOOL Ack = FALSE;
 529   1      
 530   1      #if (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
              
                      if(((gSys.SystemMode == SYS_MODE_USB) || (gSys.SystemMode == SYS_MODE_SD)) && (I2cDevice == EEPROM_IIC)) 
                      {
              #if (I2C_PIN_CONFIGURE == SDIO_TO_A3A4A5)
                              SET_CARD_TO_A3A4A5();
              #if defined(SD_DETECT_PIN_USE_A4)
                              ClrGpioRegBit(CARD_DETECT_PORT_PD, CARD_DETECT_BIT);
              #endif
              #endif
                              //写E2PROM时快速响应需要读卡时需要重新将复用IO设置回总线模式
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 10  

                              SongPlayDo();
              
              #if (I2C_PIN_CONFIGURE == SDIO_TO_A3A4A5)
              #if defined(SD_DETECT_PIN_USE_A4)               
                              SetGpioRegBit(CARD_DETECT_PORT_PD, CARD_DETECT_BIT);
              #endif
                              SET_CARD_NOT_TO_GPIO();
              #endif
                              KeyEventGet();          
                      }
              #endif
 552   1                      
 553   1              Ack = I2C_SendAddr(DevAddr, Addr, IIC_WRITE, I2cDevice);
 554   1              if(Ack == TRUE)
 555   1              {
 556   2                      Ack = I2C_WriteBytes(Buf, Len, I2cDevice);
 557   2              }
 558   1              I2C_Stop(I2cDevice);
 559   1      
 560   1      //      DBG_APP(("I2C_WriteNByte, ACK: %bu\n", (BYTE)Ack));
 561   1              return Ack;
 562   1      }
 563          
 564          
 565          // Read data from eeprom.
 566          BOOL I2C_ReadNByte(BYTE DevAddr, WORD Addr, BYTE* Buf, BYTE Len, BYTE I2cDevice)
 567          {
 568   1          BOOL Ack = FALSE;
 569   1      #if (defined(FUNC_BREAK_POINT_EN) && (FUNC_RESTORE_DEVICE_SELECE == FUNC_RESTORE_DEVICE_EEPROM))
              
              if(((gSys.SystemMode == SYS_MODE_USB) || (gSys.SystemMode == SYS_MODE_SD)) && (I2cDevice == EEPROM_IIC)) 
                      {
              #if (I2C_PIN_CONFIGURE == SDIO_TO_A3A4A5)
                              SET_CARD_TO_A3A4A5();
              #if defined(SD_DETECT_PIN_USE_A4)
                              ClrGpioRegBit(CARD_DETECT_PORT_PD, CARD_DETECT_BIT);
              #endif
              #endif
                              //写E2PROM时快速响应需要读卡时需要重新将复用IO设置回总线模式
                              SongPlayDo();
              
              #if (I2C_PIN_CONFIGURE == SDIO_TO_A3A4A5)
              #if defined(SD_DETECT_PIN_USE_A4)               
                              SetGpioRegBit(CARD_DETECT_PORT_PD, CARD_DETECT_BIT);
              #endif
                              SET_CARD_NOT_TO_GPIO();
              #endif  
                      }
              
              #endif
 591   1      
 592   1              Ack = I2C_SendAddr(DevAddr, Addr, IIC_READ, I2cDevice);
 593   1              if(Ack == TRUE)
 594   1              {
 595   2                      Ack = I2C_ReadBytes(Buf, Len, I2cDevice);
 596   2              }
 597   1              I2C_Stop(I2cDevice);
 598   1      
 599   1              return Ack;
 600   1      }
 601          
 602          
C51 COMPILER V9.00   I2C                                                                   11/24/2015 14:32:02 PAGE 11  

 603          // send address via IIC.
 604          BOOL I2C_SendAddr(BYTE DevAddr, WORD Addr, BYTE ReadWriteFlag, BYTE I2cDevice)
 605          {       
 606   1              I2C_Start(I2cDevice);
 607   1              if(!I2C_WriteByte(DevAddr, I2cDevice))
 608   1              {
 609   2                      WaitMs(EEPROM_WRITE_TIME); // Wairt for Programming-time.
 610   2                      I2C_Start(I2cDevice);
 611   2                      if(!I2C_WriteByte(DevAddr, I2cDevice))// | PageAddr))
 612   2                      {
 613   3                              I2C_Stop(I2cDevice);
 614   3                              return FALSE;
 615   3                      }
 616   2              }
 617   1              
 618   1              if(!I2C_WriteByte((BYTE)Addr, I2cDevice))
 619   1              {
 620   2                      I2C_Stop(I2cDevice);
 621   2                      return FALSE;
 622   2              }
 623   1              
 624   1              if(ReadWriteFlag == IIC_READ)
 625   1              {
 626   2                      I2C_Start(I2cDevice);
 627   2                      if(!I2C_WriteByte((DevAddr | IIC_READ), I2cDevice))
 628   2                      {
 629   3                              I2C_Stop(I2cDevice);
 630   3                              return FALSE;
 631   3                      }
 632   2              }
 633   1              
 634   1              return TRUE;
 635   1      }
 636          
 637          
 638          #endif
*** WARNING C291 IN LINE 325 OF EEPROM\I2C.C: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1248    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
