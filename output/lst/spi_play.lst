C51 COMPILER V9.00   SPI_PLAY                                                              12/29/2015 23:40:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SPI_PLAY
OBJECT MODULE PLACED IN .\output\obj\spi_play.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE spi_flash\spi_play.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\
                    -config;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\b
                    -luetooth;.\i2c) DEBUG PRINT(.\output\lst\spi_play.lst) OBJECT(.\output\obj\spi_play.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "sysctrl.h"
   3          #include "playctrl.h"
   4          #include "spi_play.h"
   5          #include "spi_fs.h"
   6          #include "devctrl.h"
   7          #include "debug.h"
   8          #include "spi_flash.h"
   9          #include "message.h"
  10          #include "key.h"
  11          #include "timer.h"
  12          #include "spi_flash.h"
  13          #include "spi_fs.h"
  14          #include "user_interface.h"
  15          #include "pcm_amplitude.h"
  16          #include "device.h"
  17          #include "bt.h"
  18          #include "Adc_key.h"
  19          #include "Bluetooth_cmd.h"
  20          #include "bt.h"
  21          #include "npca110x.h"
  22          
  23          #ifdef FUNC_SPI_KEY_SOUND_EN
  24          
  25          typedef struct _ST_SPIFILEINFO
  26          {
  27                  DWORD dwStartAddr;
  28                  DWORD dwFileSize;
  29                  DWORD dwOffset;
  30                  BYTE  ucFileType;
  31                  BYTE  ucFileNum;
  32                  SONG_INFO gSongInfo;
  33                  BYTE  Volume;
  34          
  35          } ST_SPIFILEINFO;
  36          
  37          ST_SPIFILEINFO gstSpiFileInfo;
  38          static BOOL isSpiPlay = FALSE;
  39          
  40          extern BOOL             s_BreakPointFlag;
  41          
  42          extern VOID PlayVol2Decd(VOID);
  43          extern VOID SongPlayTimePause(VOID);
  44          extern VOID BluetoothRefreshStatus();
  45          BOOL GetSpiPlay()
  46          {
  47   1              return isSpiPlay ;
  48   1      }
  49          BOOL SPIFileEOF()
  50          {
  51   1              DBG(("gSpiFsCtrl.CurrOpLen:             %lu\n", (DWORD)gSpiFsCtrl.CurrOpLen));
  52   1              DBG(("gSpiFsCtrl.CurrOpFile.FileSize:     %lu\n", (DWORD)gSpiFsCtrl.CurrOpFile.FileSize));
  53   1              if(gSpiFsCtrl.CurrOpLen >= gSpiFsCtrl.CurrOpFile.FileSize)
C51 COMPILER V9.00   SPI_PLAY                                                              12/29/2015 23:40:49 PAGE 2   

  54   1              {
  55   2                      return TRUE;
  56   2              }
  57   1      
  58   1              return FALSE;
  59   1      }
  60          
  61          
  62          //fet file info
  63          BOOL SPIFileGetInfo()
  64          {
  65   1              //gstSpiFileInfo.dwStartAddr = 48;
  66   1              //gstSpiFileInfo.dwFileSize = 153435;//1114697;
  67   1      
  68   1              gstSpiFileInfo.dwOffset = 0;
  69   1              gstSpiFileInfo.ucFileType = SONG_TYPE_MP3;
  70   1      
  71   1              // Setting song information     
  72   1              gstSpiFileInfo.gSongInfo.ChannelNum = 1;
  73   1              gstSpiFileInfo.gSongInfo.IsVBR = FALSE;
  74   1              gstSpiFileInfo.gSongInfo.Mp3MpegVersion = 3;//MPEG_1;
  75   1              gstSpiFileInfo.gSongInfo.Mp3Layer = 1;//LAYER_3;
  76   1              gstSpiFileInfo.gSongInfo.BytesPerSecond = 192000;
  77   1              gstSpiFileInfo.gSongInfo.SamplesPerSecond = 44100;
  78   1              gstSpiFileInfo.gSongInfo.SongType = SONG_TYPE_MP3;
  79   1      
  80   1              return TRUE;
  81   1      }
  82          
  83          BOOL PlayPhoneNumBreakoff = FALSE;              //播放电话号码时是否产生中断标志
  84          extern BLUETOOTH_STATUS gBlutoothStatus;
  85          
  86          
  87          //指定播放时间，初始化decoder，给decoder数据，启动decoder解码
  88          //快进，快退恢复播放
  89          //进入播放状态
  90          BOOL SPI_SongPlayStart(BYTE SpiFileNum)
  91          {       
  92   1              isSpiPlay = TRUE;
  93   1      
  94   1              if(!SPIFileGetInfo())
  95   1              {
  96   2                      //DBG(("SPIFileGetInfo Error!\n"));
  97   2                      return FALSE;
  98   2              }
  99   1      
 100   1              RstDecd();
 101   1              SetDecoderMode(gstSpiFileInfo.gSongInfo.SongType);             
 102   1              if(!SpiFlashFileOpen(SpiFileNum, 0))
 103   1              {
 104   2                      DBG(("SpiFlashFileOpen() Failed!\n"));
 105   2                      return FALSE;
 106   2              }
 107   1              
 108   1              if(!SpiFlashFileRead(gSongInfo.PlayBuffer, 512))
 109   1              {
 110   2                      DBG(("SpiFlashFileRead() Failed!\n"));
 111   2                      return FALSE;
 112   2              }
 113   1              SetDecoderData(gSongInfo.PlayBuffer, 512);      
 114   1      #ifdef AU6210K_NR_D_8_CSRBT
                      gSys.Volume = VOLUME_MAX - 6;   
C51 COMPILER V9.00   SPI_PLAY                                                              12/29/2015 23:40:49 PAGE 3   

              #else
 117   1      
 118   1      #ifdef AU6210K_ZB_BT007_CSR
 119   1              if(SPIPLAY_SONG_IR_KEY == SpiFileNum || SPIPLAY_SONG_IR_ON_OFF == SpiFileNum || SPIPLAY_SONG_POWER_ON_SOU
             -ND1 == SpiFileNum)
 120   1                      gSys.Volume = VOLUME_MAX/2;     
 121   1              else
 122   1      #endif          
 123   1                      gSys.Volume = VOLUME_MAX-8;     
 124   1      #endif
 125   1              InDacChannelSel(DAC_CH_DAC);       
 126   1      #ifdef AU6210K_NR_D_8_CSRBT
                      NPCA110X_ADC_Input_CH_Select(INPUT_CH2);
                      NPCA110X_SetOutMute(FALSE);
              #endif
 130   1      
 131   1              InDacSetSampleRate(gstSpiFileInfo.gSongInfo.SamplesPerSecond);
 132   1              InDacMuteDis(); 
 133   1      #ifdef FUNC_EXMUTE_EN
              #ifdef  FUNC_HEADPHONE_DETECT_EN
                      if(IsHeadphoneLinkFlag == FALSE)
              #endif
                      {
                              ExMuteOff();
                              DBG1(("r90rr\n"));
                      }       
              #endif
 142   1              WaitMs(50);     
 143   1      
 144   1              PlayVol2Decd();
 145   1              DecoderStartPlay();
 146   1              DBG(("<-SPI_SongPlayStart()\n"));
 147   1              
 148   1              return TRUE;
 149   1      }
 150          
 151          
 152          BOOL SPI_SongPlayDo(VOID)                                       
 153          {       
 154   1              if(SPIFileEOF())
 155   1              {
 156   2                      DBG(("SPIFileEOF!\n"));
 157   2                      return FALSE;
 158   2              }
 159   1              
 160   1              if(!IsDecoderDone())
 161   1              {
 162   2                      return TRUE;
 163   2              }
 164   1              
 165   1              if(!SpiFlashFileRead(gSongInfo.PlayBuffer, 512))
 166   1              {
 167   2                      DBG(("SpiFlashFileRead() Failed,1!\n"));
 168   2                      return FALSE;
 169   2              }
 170   1      
 171   1              SetDecoderData(gSongInfo.PlayBuffer, 512);      
 172   1              //DBG(("<-SPI_SongPlayDo()\n"));
 173   1              
 174   1              return TRUE;
 175   1      }
 176          
C51 COMPILER V9.00   SPI_PLAY                                                              12/29/2015 23:40:49 PAGE 4   

 177          
 178          //停止解码，关闭DAC
 179          VOID SPISongPlayStop(VOID)                                              
 180          {
 181   1              isSpiPlay = FALSE;
 182   1              MuteOn(TRUE, TRUE);
 183   1      }
 184          
 185          
 186          static VOID NormalSongPlayResume(VOID)
 187          {
 188   1              s_BreakPointFlag = TRUE;
 189   1              if (!SongPlayInit())
 190   1              {
 191   2                      DBG(("Song Init Error!\n"));
 192   2                      return;
 193   2              }               
 194   1      }
 195          
 196          
 197          BOOL SPI_PlaySelectNum(BYTE SpiPlayNum, BOOL PlayResumeFlag)
 198          {       
 199   1              BYTE Volume;
 200   1      
 201   1              if (SpiPlayNum > gSpiFsCtrl.FsHead.Mp3FileSum)
 202   1              {
 203   2                      return FALSE;
 204   2              }
 205   1      
 206   1              if(SpiPlayNum == SPIPLAY_SONG_IR_ON_OFF || 
 207   1                      SpiPlayNum == SPIPLAY_SONG_IR_KEY )
 208   1                      return FALSE;
 209   1                      
 210   1              if(SpiFlashModel == SpiFlash_None)
 211   1              {
 212   2                      DBG(("unsupport spi dev!\n"));
 213   2                      return FALSE;
 214   2              }
 215   1      
 216   1              Volume = gSys.Volume;   
 217   1              DecoderPause();
 218   1              SongPlayTimePause();
 219   1              
 220   1              if(gSys.SystemMode == SYS_MODE_RADIO)
 221   1              {
 222   2                      MuteOn(TRUE, TRUE);             
 223   2              }
 224   1              
 225   1              SysClkDivClr(); 
 226   1              SPI_SongPlayStart(SpiPlayNum);
 227   1      
 228   1              while(SPI_SongPlayDo())
 229   1              {
 230   2      #ifdef FUNC_WATCHDOG_EN
 231   2                      FeedWatchDog();
 232   2      #endif
 233   2              }
 234   1      
 235   1              SPISongPlayStop();      
 236   1      
 237   1              gSys.Volume = Volume;           
 238   1              
C51 COMPILER V9.00   SPI_PLAY                                                              12/29/2015 23:40:49 PAGE 5   

 239   1              if(PlayResumeFlag)
 240   1              {
 241   2                      NormalSongPlayResume(); //恢复MP3歌曲播放
 242   2                      UnMute();
 243   2              }
 244   1      
 245   1              DBG(("SpiFlashPlayEnd \n"));
 246   1      #if 0//def AU6210K_ZB_BT007_IR_IC_IS_334M_CSR
                      if(gSys.SystemMode == SYS_MODE_BLUETOOTH)       
                      {
                              if (BluetoothMuteOnOff())
                              {
                                      ExMuteOn();
                              }
                              else if (gSys.Volume > VOLUME_MIN)
                              {
                                      NormalSongPlayResume(); //恢复MP3歌曲播放
                                      ExMuteOff();
                              }
                      }
              #endif  
 260   1      
 261   1              return TRUE;
 262   1      }
 263          
 264          #endif  
 265          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    501    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     52       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
