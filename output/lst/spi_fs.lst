C51 COMPILER V9.00   SPI_FS                                                                11/13/2015 14:16:14 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SPI_FS
OBJECT MODULE PLACED IN .\output\obj\spi_fs.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE spi_flash\spi_fs.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(.\co
                    -nfig;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\slave;.\blu
                    -etooth;.\i2c) DEBUG PRINT(.\output\lst\spi_fs.lst) OBJECT(.\output\obj\spi_fs.obj)

line level    source

   1          #include <reg51.h>
   2          #include <string.h>
   3          #include "type.h"
   4          #include "syscfg.h"
   5          #include "sysctrl.h"
   6          #include "spi_flash.h"
   7          #include "spi_fs.h"
   8          #include "playctrl.h"
   9          #include "file.h"
  10          #include "utility.h"
  11          #include "buffer.h"
  12          #include "debug.h"
  13          #include "sys_on_off.h"
  14          
  15          
  16          #ifdef  FUNC_SPI_UPDATE_EN
  17          BYTE gIsMVFFileFind = 0;
  18          #endif
  19          #if (defined(FUNC_SPI_UPDATE_EN) || defined(FUNC_SPI_KEY_SOUND_EN))
  20          SPI_FS_CTRL     gSpiFsCtrl;     
  21          FILE gUpdataFile;
  22          #endif
  23          
  24          
  25          #if (defined(FUNC_SPI_PLAY_EN) || defined(FUNC_SPI_KEY_SOUND_EN))
  26          // SPI flash file system initial.
  27          BOOL SpiFlashFsInit(VOID)
  28          {
  29   1              DBG(("->SpiFlashFsInit\n"));
  30   1              //including calculate total number of respective file types, such as .mp3, .txt, .oth
  31   1              memset(&gSpiFsCtrl, 0, sizeof(gSpiFsCtrl));
  32   1              //gSpiFsCtrl.DevState = FALSE;
  33   1              if(SpiFlashModel == SpiFlash_None)
  34   1              {
  35   2                      return FALSE;
  36   2              }
  37   1              SpiFlashBlkRd(0, (BYTE XDATA *)&gSpiFsCtrl.FsHead, sizeof(SPI_FS_HEAD));                //暂定为头部信息为32字节
  38   1      
  39   1              DBG(("SpiDevCustomerId=0x%lx\n", gSpiFsCtrl.FsHead.SpiDevCustomerId));
  40   1              DBG(("TotalFileNum=%d\n", gSpiFsCtrl.FsHead.TotalFileNum));
  41   1              DBG(("Mp3FileSum=%BU\n", gSpiFsCtrl.FsHead.Mp3FileSum));
  42   1              DBG(("TXTFileSum=%BU\n", gSpiFsCtrl.FsHead.TxtFileSum));
  43   1              DBG(("OTHFileSum=%BU\n", gSpiFsCtrl.FsHead.OthFileSum));
  44   1              
  45   1              if (gSpiFsCtrl.FsHead.SpiDevCustomerId == SPI_DEV_CUSTOMER_ID)                          //compare a valid device customer ID
  46   1              {       
  47   2                      DBG(("valid spi dev!\n"));
  48   2              //      gSys.FsCtrl.FileSum = gSpiFsCtrl.FsHead.Mp3FileSum;
  49   2              //      gSys.FsCtrl.Folder.Sum = 1;
  50   2              //      gSys.FsCtrl.Folder.CurrNum = 0;
  51   2                      gSpiFsCtrl.DevState = TRUE;
  52   2              }
  53   1              else
C51 COMPILER V9.00   SPI_FS                                                                11/13/2015 14:16:14 PAGE 2   

  54   1              {
  55   2                      DBG(("invalid spi dev!\n"));
  56   2                      gSpiFsCtrl.DevState = FALSE;
  57   2                      memset(&gSpiFsCtrl.FsHead, 0, sizeof(SPI_FS_HEAD));
  58   2              }
  59   1      
  60   1              gFsInfo.FileSum = gSpiFsCtrl.FsHead.TotalFileNum;
  61   1              
  62   1              gPlayCtrl.File.FileType = FILE_TYPE_MP3;
  63   1              //verify mvsilicon FS legal flag.
  64   1              DBG(("<-SpiFlashFsInit\n"));
  65   1              return TRUE;
  66   1      }
  67          
  68          
  69          // Open the specified file in SPI flash file system.
  70          BOOL SpiFlashFileOpen(WORD FileNum, SPI_FILE_TYPE FileType)
  71          {
  72   1              WORD    TempFileNum = 1;
  73   1              
  74   1              if (FileType > SPI_FILE_OTH)
  75   1              {
  76   2                      return FALSE;
  77   2              } 
  78   1      
  79   1              if (FileType == SPI_FILE_MP3)
  80   1              {
  81   2                      if (FileNum > gSpiFsCtrl.FsHead.Mp3FileSum)
  82   2                      {
  83   3                              return FALSE;
  84   3                      }
  85   2                      TempFileNum = (FileNum + gSpiFsCtrl.FsHead.OthFileSum);
  86   2              }
  87   1              else if (FileType == SPI_FILE_TXT)
  88   1              {
  89   2                      if (FileNum > gSpiFsCtrl.FsHead.TxtFileSum)
  90   2                      {
  91   3                              return FALSE;
  92   3                      }
  93   2                      TempFileNum = (FileNum + gSpiFsCtrl.FsHead.OthFileSum + gSpiFsCtrl.FsHead.Mp3FileSum);
  94   2              }
  95   1              else
  96   1              {
  97   2                      if (FileNum > gSpiFsCtrl.FsHead.OthFileSum)
  98   2                      {
  99   3                              return FALSE;
 100   3                      }
 101   2                      TempFileNum = FileNum;
 102   2              }
 103   1      
 104   1              gSpiFsCtrl.CurrFileNum = FileNum;
 105   1              gSpiFsCtrl.CurrFileType = FileType;
 106   1              gSpiFsCtrl.CurrOpLen = 0;
 107   1      
 108   1              SpiFlashBlkRd(MVFAT_START_ADDR + (TempFileNum - 1) * MVFAT_FILE_ENTRY_UNIT_SIZE, (BYTE XDATA *)&gSpiFsCtr
             -l.CurrOpFile, sizeof(SPI_FILE_ENTRY));        //get file entry
 109   1      
 110   1              //DBG(("gSpiFsCtrl.CurrOpFile.StartAdd=%lx\n", gSpiFsCtrl.CurrOpFile.StartAdd));
 111   1              //DBG(("gSpiFsCtrl.CurrOpFile.TotalLen=%lx\n", gSpiFsCtrl.CurrOpFile.FileSize));
 112   1              
 113   1              if (FileType == SPI_FILE_MP3)
 114   1              {
C51 COMPILER V9.00   SPI_FS                                                                11/13/2015 14:16:14 PAGE 3   

 115   2                      if(gSpiFsCtrl.CurrOpFile.FileSize == 0xffffffff)        
 116   2                      {
 117   3                              gSpiFsCtrl.CurrOpFile.FileSize = 0;
 118   3                              return FALSE;
 119   3                      }
 120   2                      
 121   2      #if (defined(FUNC_SPI_KEY_SOUND_EN))    
 122   2                      memset(&gUpdataFile, 0, sizeof(FILE));
 123   2                      //gSys.FsCtrl.CurrFileNum = fileNum;
 124   2                      memset(&gUpdataFile.ShortName[0], '0', 4);
 125   2                      memcpy(&gUpdataFile.ShortName[4], &gSpiFsCtrl.CurrOpFile.ucaFileName[0], 4);
 126   2                      memcpy(&gUpdataFile.ShortName[8], &gSpiFsCtrl.CurrOpFile.ucaFileName[5], 3);
 127   2      
 128   2                      gUpdataFile.Size = gSpiFsCtrl.CurrOpFile.FileSize;
 129   2                      gUpdataFile.SecNum = (gSpiFsCtrl.CurrOpFile.FileSize + 511) / SPI_SECTOR_SIZE;
 130   2                      gUpdataFile.StartSec = (gSpiFsCtrl.CurrOpFile.StartAdd - (MVFAT_START_ADDR + gSpiFsCtrl.FsHead.TotalFile
             -Num * MVFAT_FILE_ENTRY_UNIT_SIZE)) / SPI_SECTOR_SIZE;
 131   2                      gUpdataFile.OpSec = gUpdataFile.StartSec;
 132   2                      gUpdataFile.OpSecCnt = 0;       
 133   2                      gUpdataFile.FileType = FILE_TYPE_MP3;
 134   2                      
 135   2                      DBG(("gFile.Size=%lx\n", gUpdataFile.Size));
 136   2                      DBG(("gFile.SecNum=%lx\n", gUpdataFile.SecNum));
 137   2                      DBG(("gFile.OpSec=%lx\n", gUpdataFile.OpSec));
 138   2                      DBG(("gPlayCtrl.File.FileType=%bu\n", gUpdataFile.FileType));
 139   2      #endif
 140   2      
 141   2      #if (defined(FUNC_SPI_PLAY_EN)) 
                              memset(&gPlayCtrl.File, 0, sizeof(FILE));
                              //gSys.FsCtrl.CurrFileNum = fileNum;
                              memset(&gPlayCtrl.File.ShortName[0], '0', 4);
                              memcpy(&gPlayCtrl.File.ShortName[4], &gSpiFsCtrl.CurrOpFile.ucaFileName[0], 4);
                              memcpy(&gPlayCtrl.File.ShortName[8], &gSpiFsCtrl.CurrOpFile.ucaFileName[5], 3);
                              gPlayCtrl.File.Size = gSpiFsCtrl.CurrOpFile.FileSize;
                              gPlayCtrl.File.SecNum = (gSpiFsCtrl.CurrOpFile.FileSize + 511) / SPI_SECTOR_SIZE;
                              gPlayCtrl.File.StartSec = (gSpiFsCtrl.CurrOpFile.StartAdd - (MVFAT_START_ADDR + gSpiFsCtrl.FsHead.TotalF
             -ileNum * MVFAT_FILE_ENTRY_UNIT_SIZE)) / SPI_SECTOR_SIZE;
                              gPlayCtrl.File.OpSec = gPlayCtrl.File.StartSec;
                              gPlayCtrl.File.OpSecCnt = 0;    
                              gPlayCtrl.File.FileType = FILE_TYPE_MP3;
              
                              //      gSys.BP_ResumeFlag = FALSE;     
                              DBG(("gFile.Size=%lx\n", gPlayCtrl.File.Size));
                              DBG(("gFile.SecNum=%lx\n", gPlayCtrl.File.SecNum));
                              DBG(("gFile.OpSec=%lx\n", gPlayCtrl.File.OpSec));
                              DBG(("gPlayCtrl.File.FileType=%bu\n", gPlayCtrl.File.FileType));
              #endif
 160   2              }
 161   1              
 162   1              return TRUE;    
 163   1      }
 164          
 165          
 166          // Read File data from the specified file.
 167          WORD SpiFlashFileRead(WORD Buf, WORD Length)
 168          {
 169   1              SpiFlashBlkRd((gSpiFsCtrl.CurrOpFile.StartAdd + gSpiFsCtrl.CurrOpLen), (BYTE XDATA*)Buf, Length);
 170   1              
 171   1              gSpiFsCtrl.CurrOpLen += Length;
 172   1      
 173   1              if (gSpiFsCtrl.CurrFileType == SPI_FILE_MP3)
 174   1              {
C51 COMPILER V9.00   SPI_FS                                                                11/13/2015 14:16:14 PAGE 4   

 175   2      #if (defined(FUNC_SPI_PLAY_EN))                 
                              gPlayCtrl.File.OpSecCnt = (gSpiFsCtrl.CurrOpLen + 511) / SPI_SECTOR_SIZE;
                              gPlayCtrl.File.OpSec = gPlayCtrl.File.StartSec + gPlayCtrl.File.OpSecCnt;
                              DBG(("gPlayCtrl.File.OpSecCnt=%lx\n", gPlayCtrl.File.OpSecCnt));
                              DBG(("gPlayCtrl.File.OpSec=%lx\n", gPlayCtrl.File.OpSec));
              #endif
 181   2      
 182   2      #if (defined(FUNC_SPI_KEY_SOUND_EN))
 183   2                      gUpdataFile.OpSecCnt = (gSpiFsCtrl.CurrOpLen + 511) / SPI_SECTOR_SIZE;
 184   2                      gUpdataFile.OpSec = gPlayCtrl.File.StartSec + gUpdataFile.OpSecCnt;
 185   2                      DBG(("gUpdataFile.OpSecCnt=%lx\n", gUpdataFile.OpSecCnt));
 186   2                      DBG(("gUpdataFile.OpSec=%lx\n", gUpdataFile.OpSec));
 187   2      #endif
 188   2              }
 189   1              
 190   1              return Length;
 191   1      }
 192          
 193          
 194          VOID SpiFlashFileRewind(VOID)
 195          {
 196   1              gSpiFsCtrl.CurrOpLen = 0;
 197   1      }
 198          
 199          
 200          VOID SpiFlashFileSeek(VOID)
 201          {
 202   1      #if (defined(FUNC_SPI_PLAY_EN))                 
                      gSpiFsCtrl.CurrOpLen = (gPlayCtrl.File.OpSec - gPlayCtrl.File.StartSec) * SPI_SECTOR_SIZE;
              #endif
 205   1      
 206   1      #if (defined(FUNC_SPI_KEY_SOUND_EN))                    
 207   1              gSpiFsCtrl.CurrOpLen = (gUpdataFile.OpSec - gUpdataFile.StartSec) * SPI_SECTOR_SIZE;
 208   1      #endif
 209   1      
 210   1              DBG(("gSpiFsCtrl.CurrOpLen:%lx\n", gSpiFsCtrl.CurrOpLen));
 211   1      }
 212          #endif
 213          
 214          
 215          //========================================================================================================
             -==============
 216          // #ifdef       FUNC_SPI_UPDATE_EN
 217          //Download MVF to SPI flash
 218          //
 219          #ifdef  FUNC_SPI_UPDATE_EN
 220          VOID DownloadMVFToFsh(VOID)
 221          {
 222   1              WORD    Length;
 223   1              DWORD   Addr = 0;
 224   1      
 225   1              DBG(("->DownloadMVFToFsh\n"));
 226   1      #ifdef FUNC_WATCHDOG_EN
 227   1              WatchDogDis();
 228   1      #endif  
 229   1                      
 230   1              DBG(("\nSpiFlashErase!\n"));
 231   1              SpiFlashErase();
 232   1              DBG(("\nUpdate start!\n"));
 233   1      
 234   1              while(!FileEOF(&gUpdataFile))
 235   1              {
C51 COMPILER V9.00   SPI_FS                                                                11/13/2015 14:16:14 PAGE 5   

 236   2                      if((Length = FileRead(&gUpdataFile, PLAY_BUFFER_START, 512)) == 0)
 237   2                      {
 238   3      #ifdef FUNC_WATCHDOG_EN
 239   3                              WatchDogEn();
 240   3      #endif
 241   3                              DBG(("DownloadMVFToFsh,ReadFile Failed!\n"));
 242   3                              return ;
 243   3                      }
 244   2                      
 245   2                      SPIFlashMultiBytePrgm(Addr, (BYTE XDATA *)DMA_XBUF_START, Length);
 246   2                      Addr += Length;
 247   2                      DBG(("%ld%%\n", (Addr * 100UL) / gUpdataFile.Size));
 248   2                      WaitUs(10);
 249   2              }
 250   1              DBG(("\nUpdate OK!\n"));        
 251   1      
 252   1      #ifdef FUNC_WATCHDOG_EN
 253   1              WatchDogEn();
 254   1      #endif
 255   1              return ;
 256   1      }
 257          #endif  //#ifdef        FUNC_SPI_UPDATE_EN
 258          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    934    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    103      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
